#line 1 "gix_esql_scanner.cc"

#line 3 "gix_esql_scanner.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */
/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* begin standard C++ headers. */
/* %if-c++-only */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* %not-for-header */
/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::streambuf* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */
/* %ok-for-header */

/* %endif */
/* %endif */

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define FLEX_DEBUG
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;
/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 120
#define YY_END_OF_BUFFER 121
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[966] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      121,  119,  117,  116,  119,  119,  119,  119,  119,  119,
      119,  115,  115,  115,  115,  115,  115,  115,  115,  115,
       60,  119,   70,   74,   70,   61,   71,  119,   74,   74,
       74,   74,   74,   74,   74,   74,   74,  119,   74,  111,
      111,  110,  111,  111,  111,  108,  109,   90,   90,   90,
       90,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  111,  120,  117,
      116,  120,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,  120,   27,   51,  120,   53,   53,   53,   31,
      120,   42,  120,   42,   47,   47,   42,   30,   48,   47,
       43,   48,   47,   47,   47,   47,   47,   47,   47,   47,
       42,  120,   47,  112,  120,  120,    5,    5,    4,    5,
        3,  117,  116,    0,    0,    2,    0,    0,    0,    0,
      115,    0,  115,  115,  115,    2,  115,  114,  115,  115,
      115,   60,   70,   74,    0,    0,   74,   70,   71,    0,
       71,   62,    0,   74,   74,   74,   74,    2,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,  110,    0,
        0,  107,  108,    0,    0,   90,   90,  108,  108,  108,

      108,  108,    2,  108,  102,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,    0,    0,  116,   27,    0,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   51,   53,
       53,   53,   31,   42,    0,    0,   44,   47,    0,    0,
       47,   47,    0,    0,   47,   42,   43,    0,   43,   32,
        0,   47,   47,   47,   47,   47,   47,   47,   29,   47,
       47,   47,  112,    0,    0,  113,    4,    0,    0,    0,
        0,    0,    0,  115,  115,  115,  115,  115,  115,  115,
       74,   74,    0,   74,   71,   74,   74,   74,   74,   74,

       68,   74,   74,   74,   74,   74,   74,   74,   74,  107,
       90,    0,  108,   80,   90,    0,  106,  103,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
       87,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,    0,    0,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   53,   53,   44,   44,
       44,   47,   47,    0,   47,   47,   47,    0,   47,   43,
       47,   47,   37,   47,   47,   47,   47,   47,   47,   47,
       47,    0,    0,    0,    0,    0,    0,  115,  115,  115,
      115,  115,  115,   74,   74,   74,   74,   74,   65,   69,

       74,   74,   74,   74,   74,   74,   80,  108,  108,   92,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,   97,  108,  108,  108,  108,
      108,  107,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   15,   27,   27,   27,   53,   53,   47,   47,   34,
       47,   40,   47,   28,   47,   47,   47,    0,    0,    0,
        0,    0,    0,  115,  115,  115,   74,   74,   74,   74,
       74,   63,    0,   74,  108,  108,  108,    0,    0,  108,
        0,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  104,  108,   91,  105,  108,   17,   27,   27,

       27,   27,   27,   27,   18,   27,   27,   27,   27,   53,
       52,   47,   47,   47,   47,   39,   47,    0,    0,    0,
        0,    0,    0,    0,  115,  115,  115,   66,   74,   74,
       74,   64,    0,   74,   93,  108,   94,   95,   96,    0,
        0,  108,    0,  108,  108,  108,  108,  108,   89,  108,
      108,  108,  108,  108,  108,  105,  108,   22,   27,   27,
        8,   27,   27,    7,   27,    6,   13,   53,   35,   47,
       47,   33,    0,    0,    0,   49,    0,    0,    0,    0,
        0,  115,  115,  115,   74,   74,   74,    0,   74,  108,
        0,   49,    0,  108,    0,   98,  108,  108,  108,  108,

       88,  108,    0,    0,  108,  108,  108,    0,    9,   14,
       27,   16,   27,   53,   47,   47,    0,    0,    1,    0,
        0,    0,    0,  115,  115,   73,   74,    0,   74,  108,
        1,  101,    0,  108,  108,  108,  108,    0,    0,   99,
      100,  108,    0,    0,   27,   26,   53,   46,   47,    0,
        0,    0,    0,    0,    0,    0,  115,  115,    0,   72,
       74,   67,   74,  108,    0,    0,    0,  108,  107,  108,
      108,    0,    0,  108,    0,    0,    0,   27,    0,    0,
       54,    0,   45,   47,    0,   36,    0,    0,    0,    0,
        0,  115,   72,   74,  108,    0,    0,    0,    0,    0,

      108,  108,    0,    0,  108,    0,    0,   10,   12,    0,
       45,   47,    0,    0,    0,    0,    0,    0,  115,   74,
      108,    0,    0,    0,    0,    0,  108,  108,    0,    0,
      108,   21,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  115,   74,  108,    0,    0,    0,    0,    0,  108,
      108,    0,    0,  108,    0,    0,    0,    0,    0,    0,
        0,    0,   58,    0,    0,    0,  115,   74,  108,    0,
        0,    0,    0,    0,   58,  108,  108,    0,    0,  108,
        0,    0,    0,   11,   25,   38,    0,    0,    0,    0,
        0,  115,   74,    0,    0,    0,    0,    0,    0,  108,

        0,    0,  108,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  115,   74,    0,    0,    0,    0,    0,
        0,    0,    0,   85,    0,   86,  108,    0,    0,    0,
        0,    0,    0,    0,   50,    0,   57,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   41,    0,    0,    0,   76,    0,   75,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   59,    0,
        0,    0,    0,    0,    0,   19,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,   23,    0,    0,    0,   84,
        0,    0,    0,   82,    0,    0,    0,    0,    0,    0,
        0,   81,    0,    0,    0,   56,    0,    0,   20,    0,
        0,    0,    0,    0,    0,   24,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       78,    0,    0,   77,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    6,    1,    8,    6,    9,   10,
       11,   12,   13,   14,   15,   16,    8,   17,   18,   19,
       20,   17,   17,   21,   22,   23,   17,   24,   25,    8,
        8,    8,    6,   26,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       53,   54,   53,   55,   52,   56,   57,   58,   59,   60,

       61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
       71,   72,   73,   74,   75,   76,   77,   78,   79,   80,
       81,   52,   54,   26,   54,   26,    1,   54,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,

       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[84] =
    {   0,
        1,    1,    2,    3,    4,    1,    5,    1,    6,    7,
        7,    8,    9,    1,   10,   11,   10,   10,   10,   10,
       10,   10,   10,    1,    3,   12,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   12,   12,   12,   14,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   15,   15
    } ;

static const flex_int16_t yy_base[1027] =
    {   0,
        0,   78,  156,  234,  313,    0,  396,    0,  479,    0,
      562,  645,    4,    8,  728,    0,  811,  894,   12,   17,
     1542, 4103,   21, 4103, 1531,    0,    4,    0,    1,    0,
        2, 1514,   32,   23,    8,   40,    2,   11,   34,   51,
     4103, 1518,   89,   29,  158, 4103,    3,   48,  149,   53,
      226,   47,   97,  125,  151,  162,  559,    0,   73, 4103,
       94, 4103, 1512,    0, 1481, 1401, 4103,  825,  833,  852,
      860,  148,   56,  122,   69,  219,  178,  216,  551,  208,
       93,  561,  547,  180,   71,  207,  193,  963, 4103,  129,
     4103, 1465,   43,  557,  601,  531,  603,  595,  222,  597,

      627,  621,    0,   60, 4103, 1438,    0,   78,  104, 4103,
     1426,  915,    0,  946, 1019,  590,  982, 4103, 4103,  592,
      127,  307,  910,  873,  988, 1006,  999,  928,  842, 1033,
     1078,    0,  808, 4103, 1401,  190, 4103,  266, 4103, 1395,
     4103,  283, 4103,  155,  558, 4103,  559,  561,  626,  637,
     1373,    0,  689,  844,  906, 1365,  644, 1359,  822,  843,
      922, 4103, 1097,  923,  849,    0,  930, 1112,  501,    0,
      520, 4103, 1338, 1064, 1025, 1062, 1080,  957, 1097, 1110,
     1114, 1105, 1116, 1132, 1134, 1142, 1155, 1160, 4103, 1313,
     1291, 1270, 1153,    0,  696, 1035, 1243,  897, 1108,  893,

     1136, 1227, 1147, 1139, 1140,  806, 1200, 1242, 1146, 1018,
     1154, 1148, 1077, 1228, 1232, 1244, 1236, 1249, 1251, 1245,
     1237,    0,    0, 4103,  522,    0,  613, 1246, 1253, 1301,
     1267, 1255, 1269, 1289, 1309, 1294, 1305, 1314, 4103,    0,
      662, 1171, 4103, 1353, 1213, 1148, 1409, 1492, 1575, 1658,
        0, 1150, 1128,    0, 1207, 1430,  625,    0,  641, 4103,
     1134, 1378, 1389, 1383, 1387, 1428, 1391, 1437, 1264, 1472,
     1510, 1468, 4103,  287,  823, 4103, 4103, 1297, 1326, 1325,
     1326, 1353, 1353, 1115, 1351, 1466, 1471, 1364, 1493, 1410,
      643, 4103,    0,  747,    0, 1513, 1515, 1520, 1527, 1554,

     1522, 1549, 1537, 1617, 1626, 1630, 1672, 1622, 1674, 4103,
     1604, 1079, 1757, 1630, 1839, 1907, 1003, 1001, 1373, 1650,
     1397, 1664, 1656, 1663, 1394, 1490, 1668,  921, 1665, 1481,
     1651, 1669, 1660, 1713, 1721, 1667, 1741, 1671, 1742, 1732,
     1739, 1072, 1066, 1743, 1746, 1737, 1748, 1805, 1808, 1825,
     1852, 1837, 1752, 1831, 1849, 1855, 1048, 1421, 4103, 1039,
     1989, 2072, 1033, 2155,    0,  749, 4103,    0,  829, 1060,
     1861, 1524, 1552, 1870, 1900, 1935, 1884, 1873, 1902, 1925,
     1952, 1029, 1009, 1004, 1424, 1580, 1578,  924,  946,  948,
     1781, 1943, 1957, 1557, 1938, 1949, 1788, 1867, 1718, 1941,

     1984, 2009, 2023, 2029, 1972, 2034, 4103, 1975, 1979, 1159,
      101,  147, 2019,  198, 1993, 2026, 2021, 2037, 2036, 2020,
     2053, 2076, 2060, 2120, 2065,  925, 2068, 2114, 2122, 2153,
     2150, 4103, 2155, 2157, 2159, 2161, 2141, 2148, 2063, 2163,
     2151, 1144, 2170, 2177, 2175, 1583, 1760, 2185, 2231, 1955,
     2233, 1965, 2245, 2046, 2238, 2247, 2117,  995, 1828, 2205,
     1841, 1845, 1908, 2232, 2239, 2248, 2250, 2256, 2260, 2266,
     2271, 2125, 2276, 2282, 2274, 2230, 2193,  986, 2286, 2237,
     2292, 2301, 2311, 1534, 2278, 2299, 2305, 2229, 2316, 2312,
     2319, 2335,  892, 2331,  886, 2324, 2330, 1202, 2326, 2344,

     2333, 2353, 2350, 2358, 1212, 2372, 2364, 2376, 2388, 2064,
        0, 2379, 2394, 2408, 2421, 2347, 2381, 2423, 1045, 2395,
     2408, 2411, 2398, 2417, 2435, 2409, 2449, 2444, 2462, 2467,
     2469, 2465, 2438, 2472,  878, 2449,  863,  827,  803, 1390,
     2446, 2475, 2461, 2461, 2476, 2454, 2457, 1714,  775, 2477,
     2483, 1082, 1109, 2487, 2471,  758, 2501, 1716, 2494, 2511,
     1271, 2516, 2530, 1275, 2533, 1357, 1441, 2535, 2485, 2557,
     2555, 2497, 2545, 2534, 1543, 4103, 2540, 2552,  829, 2540,
      811, 1698, 2579, 1551, 2573, 2585, 2587, 2559, 2591, 2590,
     1775, 4103, 2562, 2582, 2592,  639, 1124, 2576, 2577, 2596,

      620, 2601, 2620, 2621, 2602, 2624, 1864, 2630, 2041, 1633,
     2615, 1707, 2610, 2631, 2665, 2669, 2633, 2644, 2280, 2640,
     2643, 2658, 2646, 2683, 2684, 2722, 2689, 2671, 2687, 2684,
     2639,  607, 2661, 2672, 2692, 2682, 2699, 2684, 2702,  605,
      517, 2701, 2694, 2734, 2720, 2703, 2752, 2784, 2751, 2717,
     2747, 2789, 2749, 2759,  580, 2749, 1880, 2780, 2812, 2761,
     2793, 4103, 2781, 2753, 2818, 2842, 2766, 2767,  495, 2789,
     2127, 2777, 2803, 2792, 2795, 2819, 2810, 2806, 2835, 2882,
     4103, 2888, 2830, 2849, 2846, 4103, 2854, 2854, 2867, 2892,
     2858, 2889, 4103, 2892, 2871, 2879, 2880, 2884, 2876, 2876,

     2891, 2875, 2875, 2882, 2894, 2897, 2892, 4103, 1819, 2897,
     4103, 2934, 2911, 2925, 2915, 2910, 2924, 2917, 2927, 2946,
     2925, 2940, 2937, 2949, 2949, 2940, 2948, 2955, 2948, 2953,
     2949, 2972, 2961, 2950, 2997, 2957, 2965, 1959, 2969, 2957,
     2979, 2999, 3016, 2979, 2976, 3003, 3001,  307, 2115, 3009,
     3008, 3001, 3004, 3019, 3043, 3006, 3004, 3015, 3002, 3008,
     3011, 2133, 4103, 3018, 3028, 3031, 3041, 3046, 2297, 3038,
     3026, 3040, 3055, 2189, 4103, 2329, 3050, 3038, 3046, 3067,
     3072, 3070, 3062, 4103, 3097, 4103,  302, 3077, 3070, 3067,
     3082, 3103, 3107, 3109, 3074,  269, 3076, 3090, 3120, 2580,

     2352, 2501, 3095, 3089, 3085, 3102, 3136, 3103, 3104, 3121,
     2505, 3118,  253, 2982, 3142, 3131, 3132, 3161, 3136, 3141,
     3140, 3154, 3182, 4103, 3189, 4103, 2731, 3141, 3139, 3155,
     3147, 3144, 3137, 3154, 4103, 3191, 4103, 3147, 3201, 3183,
      241, 3182,  206, 3176, 3188, 3188, 3193, 3217, 3185, 3180,
     3190, 4103, 3188, 3199, 3185,  196, 3203,  171, 3206, 3189,
     3208, 3193, 3231, 3208, 3206, 3236,  152, 3219, 3216, 3214,
     3210, 3224, 3218, 3240, 3241, 3246, 3250,   98, 4103, 3228,
     3236, 3252, 3249, 3242, 3251, 4103, 3249, 3243, 3286, 3255,
     3252, 3249,   85, 3255, 3256, 3267, 3275, 3277, 3270, 3316,

     3281, 3295, 3319, 3274, 3292, 4103, 3288, 3291, 3329, 4103,
       52, 3302, 3332, 4103, 3334, 3298, 3315, 3342, 3346, 3323,
     3348, 4103, 3323, 3328, 3352, 4103, 3328, 3316, 4103, 3320,
     3337, 3332, 3338, 3325, 3331, 4103, 3339, 3335, 3336,   50,
     3338, 3375,   48, 3339, 3381, 3351, 3343,   25, 3357, 3357,
       10, 3340, 3362, 3363, 3348, 3371, 3372, 3409, 3381, 3410,
     4103, 3411, 3427, 4103, 4103, 3443, 3458, 3473, 3488, 3503,
     3518, 3533, 3543, 3549, 3553, 3568, 3583, 3589, 3599, 3603,
     3610, 3623, 3638, 3648, 3654, 3658, 3670, 3683, 3693, 3697,
     3703, 3718, 3733, 3748, 3763, 3778, 3793, 3808, 3818, 3828,

     3832, 3838, 3842, 3848, 3860, 3873, 3888, 3898, 3902, 2017,
     3912, 3927, 3942, 3948, 3963, 3978, 3988, 3995, 4008, 4023,
     4038, 4048, 4052, 4064, 4074, 4087
    } ;

static const flex_int16_t yy_def[1027] =
    {   0,
      966,  966,  967,  967,  965,    5,  965,    7,  965,    9,
      968,  968,  969,  969,  965,   15,  970,  970,  971,  971,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  972,  972,  972,  972,  972,  972,  972,  972,  972,
      965,  965,  965,  973,  973,  965,  974,  965,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  975,  973,  965,
      965,  965,  965,  976,  977,  978,  965,  978,  978,  978,
      978,  978,  978,  978,  978,  978,  978,  978,  978,  978,
      978,  978,  978,  978,  978,  978,  978,  978,  965,  965,
      965,  965,  979,  979,  979,  979,  979,  979,  979,  979,

      979,  979,  980,  979,  965,  965,  981,  981,  981,  965,
      965,  965,  982,  965,  983,  984,  984,  965,  965,  984,
      985,  965,  984,  984,  984,  984,  984,  984,  984,  984,
      984,  986,  984,  965,  965,  987,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      972,  988,  972,  972,  972,  972,  972,  972,  972,  972,
      972,  965,  965,  973,  989,  975,  973,  973,  974,  990,
      991,  965,  965,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  965,  976,
      977,  977,  978,   88,  965,  978,  992,  978,  978,  978,

      978,  978,  978,  978,  978,  978,  978,  978,  978,  978,
      978,  978,  978,  978,  978,  978,  978,  978,  978,  978,
      978,  993,  994,  965,  979,  980,  979,  979,  979,  979,
      979,  979,  979,  979,  979,  979,  979,  979,  965,  981,
      981,  981,  965,  965,  982,  995,  996,  996,  997,  998,
      248,  999, 1000, 1001,  999,  999, 1002, 1003, 1004,  965,
      965,  999,  999,  999,  999,  999,  999,  999,  999,  999,
      999,  999,  965,  965, 1005,  965,  965,  965,  965,  965,
      965,  965,  965, 1006, 1007, 1007, 1007, 1007, 1007, 1007,
     1008,  965, 1009, 1008, 1010, 1011, 1011, 1011, 1011, 1011,

     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,  965,
      965, 1012, 1013,  965, 1013,  315, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1015, 1016, 1017, 1017, 1017, 1017, 1017, 1017, 1017,
     1017, 1017, 1017, 1017, 1017, 1017, 1018, 1018,  965, 1019,
     1020, 1020, 1019, 1021,  362, 1022,  965, 1023, 1022, 1004,
      999,  999,  999,  999,  999,  999,  999,  999,  999,  999,
      999,  965,  965,  965,  965,  965,  965, 1007, 1007, 1007,
     1007, 1007, 1007, 1011, 1011, 1011, 1011, 1011, 1011, 1011,

     1011, 1011, 1011, 1011, 1011, 1011,  965, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014,  965, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017,
     1017, 1017, 1017, 1017, 1017, 1018, 1018,  999,  999,  999,
      999,  999,  999,  999,  999,  999,  999, 1024,  965,  965,
      965,  965,  965, 1007, 1007, 1007, 1011, 1011, 1011, 1011,
     1011, 1011,  965, 1011, 1014, 1014, 1014, 1025,  965, 1014,
      965, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1017, 1017, 1017,

     1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1018,
     1018,  999,  999,  999,  999,  999,  999,  965, 1024,  965,
      965,  965,  965,  965, 1007, 1007, 1007, 1011, 1011, 1011,
     1011, 1011,  965, 1011, 1014, 1014, 1014, 1014, 1014, 1025,
      965, 1014,  965, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1017, 1017, 1017,
     1017, 1017, 1017, 1017, 1017, 1017, 1017, 1018,  999,  999,
      999,  999,  965,  965,  965,  965,  965,  965,  965,  965,
      965, 1007, 1007, 1007, 1011, 1011, 1011,  965, 1011, 1014,
      965,  965,  965, 1014,  965, 1014, 1014, 1014, 1014, 1014,

     1014, 1014,  965,  965, 1014, 1014, 1014,  965, 1017, 1017,
     1017, 1017, 1017, 1018,  999,  999,  965,  965,  965,  965,
      965,  965,  965, 1007, 1007, 1011, 1011,  965, 1011, 1014,
      965, 1014,  965, 1014, 1014, 1014, 1014,  965,  965, 1014,
     1014, 1014,  965,  965, 1017, 1017, 1018,  999,  999,  965,
      965,  965,  965,  965,  965,  965, 1007, 1007,  965, 1008,
     1011,  965, 1011, 1014,  965,  965,  965, 1014, 1014, 1014,
     1014,  965,  965, 1014,  965,  965,  965, 1017,  965,  965,
      965,  965, 1022,  999,  965,  965,  965,  965,  965,  965,
      965, 1007,  965, 1011, 1014,  965,  965,  965,  965,  965,

     1014, 1014,  965,  965, 1014,  965,  965,  965, 1017,  965,
      965,  999,  965,  965,  965,  965,  965,  965, 1007, 1011,
     1014,  965,  965,  965,  965,  965, 1014, 1014,  965,  965,
     1014,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965, 1007, 1011, 1014,  965,  965,  965,  965,  965, 1014,
     1014,  965,  965, 1014,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965, 1007, 1011, 1014,  965,
      965,  965,  965,  965,  965, 1014, 1014,  965,  965, 1014,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965, 1007, 1011,  965,  965,  965,  965,  965,  965, 1014,

      965,  965, 1014,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965, 1007, 1011,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965, 1014,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965, 1026,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965, 1026,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,

      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,    0,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,

      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965
    } ;

static const flex_int16_t yy_nxt[4187] =
    {   0,
      965,   23,   24,   25,   23,   90,   91,   92,   90,   90,
       91,   92,   90,  138,  139,  140,  138,  152,  138,  139,
      140,  138,  142,  152,  953,  142,  152,  141,   26,  146,
       27,   28,  141,  153,  147,  148,  142,   29,  152,  950,
      144,   30,  150,  149,  165,  159,  158,  152,   31,  152,
      172,  173,  945,  145,  942,  152,  919,  155,   26,  146,
       27,   28,  165,  154,  147,  148,  152,   29,  165,  156,
      144,   30,  150,  149,  157,  159,  158,  160,   31,   23,
       24,   25,   23,  145,  170,  171,  182,  155,  165,  902,
      200,  161,  176,  154,  163,  142,  163,  220,  142,  156,

      163,  163,  177,  163,  157,  478,   26,  160,   27,   28,
      166,  167,  165,  879,  163,   29,  182,  241,  202,   30,
      200,  161,  176,  213,  226,  227,   31,  220,  166,  167,
      142,  183,  177,  142,  166,  167,   26,  194,   27,   28,
      165,  226,  227,  163,  163,   29,  242,  241,  202,   30,
      194,  479,  194,  213,  166,  167,   31,   33,   24,   25,
       23,  183,  201,  163,  165,  163,  165,  879,  184,  163,
      168,   22,  168,  165,  194,  858,  242,  165,  166,  167,
       22,  185,  194,  163,   34,  198,   35,   36,  186,  174,
       37,  199,  201,   38,  274,  175,  278,   39,  184,  222,

      856,  223,  481,  194,   40,  276,  166,  167,  258,  259,
      858,  185,  163,  168,   34,  198,   35,   36,  186,  174,
       37,  199,  205,   38,  219,  175,  278,   39,  194,  194,
      166,  167,  166,  167,   40,   33,   24,   25,   23,  166,
      167,  165,  211,  166,  167,  856,  206,  221,  203,   22,
      207,  212,  205,  204,  219,  178,  208,  839,   22,  194,
      179,  194,   34,  235,   35,   36,  180,  142,   37,  181,
      142,   38,  211,  818,  194,   39,  206,  221,  203,  194,
      207,  212,   40,  204,  142,  178,  208,  142,  194,  194,
      179,  274,   34,  235,   35,   36,  180,  194,   37,  181,

      194,   38,  276,  226,  227,   39,  809,  166,  167,  260,
      261,  773,   40,   22,   23,   41,   42,   23,   43,   22,
       43,   44,   44,   44,   43,   45,   46,   45,   22,   44,
       44,   44,   44,   44,   44,   44,   47,   48,   43,   44,
       44,   49,   44,   50,   51,   44,   44,   52,   44,   44,
       53,   44,   44,   44,   54,   44,   44,   55,   56,   44,
       44,   57,   44,   44,   44,   22,   22,   43,   45,   44,
       44,   49,   44,   50,   51,   44,   44,   52,   44,   44,
       53,   44,   44,   44,   54,   44,   44,   55,   56,   44,
       44,   57,   44,   44,   58,   59,   60,   61,   62,   63,

       61,   60,   64,   60,   65,   60,   60,   60,   60,   60,
       66,   67,   68,   68,   68,   68,   69,   70,   71,   60,
       60,   60,   72,   73,   74,   66,   75,   76,   66,   66,
       77,   66,   66,   78,   66,   66,   79,   80,   66,   81,
       82,   83,   84,   85,   86,   87,   66,   66,   60,   60,
       60,   60,   72,   73,   74,   66,   75,   76,   66,   66,
       77,   66,   66,   78,   66,   66,   79,   80,   66,   81,
       82,   83,   84,   85,   86,   87,   66,   88,   66,   89,
       90,   91,   92,   90,   89,   89,   89,   93,   93,   93,
       89,   93,   89,   93,   89,   93,   93,   93,   93,   93,

       93,   93,   89,   89,   89,   93,   93,   94,   95,   96,
       97,   93,   93,   98,   93,   93,   93,   93,   93,   99,
       93,   93,  100,  101,   93,  102,   93,   93,   93,   93,
       93,   89,   89,   89,   93,   93,   93,   94,   95,   96,
       97,   93,   93,   98,   93,   93,   93,   93,   93,   99,
       93,   93,  100,  101,   93,  102,   93,   93,   93,   93,
      103,  104,   89,   90,  105,  106,   90,   89,   89,   89,
       89,   89,   89,   89,  165,   89,  194,   89,  209,  210,
      232,  217,  170,  171,  690,   89,   89,   89,  279,  214,
      218,  215,  108,  187,  228,  216,  280,  229,  194,  188,

      281,  170,  171,  226,  227,  253,  109,  253,  209,  210,
      232,  217,  226,  227,   89,   89,   89,   89,  279,  214,
      218,  215,  108,  187,  228,  216,  280,  229,  194,  188,
      281,  230,  194,  233,  234,  231,  109,  236,  226,  227,
      166,  167,  194,   89,   89,   89,   90,  105,  106,   90,
       89,   89,   89,   89,   89,   89,   89,  237,   89,  152,
       89,  230,  238,  233,  234,  231,  282,  236,   89,   89,
       89,  254,  255,  254,  255,  108,  226,  227,  226,  227,
      283,  287,  226,  227,  226,  227,  194,  237,  194,  109,
      153,  357,  238,  142,  226,  227,  282,   89,   89,   89,

       89,  194,  226,  227,  152,  108,  258,  259,  226,  227,
      283,  287,  311,  311,  311,  311,  311,  311,  311,  109,
      194,  357,  258,  259,  293,  294,   89,   89,   89,   90,
      110,  111,   90,  112,  113,  114,  115,  116,  116,  114,
      117,  118,  117,  119,  120,  120,  120,  120,  120,  120,
      120,  121,  122,  112,  120,  120,  123,  120,  124,  125,
      120,  120,  126,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  127,  128,  129,  120,  130,  120,  120,  120,
      119,   89,  114,  131,  120,  120,  123,  120,  124,  125,
      120,  120,  126,  120,  120,  120,  120,  120,  120,  120,

      120,  120,  127,  128,  129,  120,  130,  120,  120,  132,
      133,   89,   90,  134,  135,   90,   89,   89,   89,   89,
       89,   89,   89,  253,   89,  623,   89,  274,  293,  294,
      368,  369,  325,  621,   89,   89,   89,  152,  276,  194,
      195,  196,  196,  196,  196,  196,  196,  196,  195,  196,
      196,  196,  196,  197,  196,  196,  194,  253,  152,  152,
      292,  288,  325,   89,   89,   89,   89,  195,  196,  196,
      196,  196,  196,  197,  197,  195,  196,  196,  196,  196,
      196,  196,  197,  289,  194,  285,  270,  194,  253,  254,
      255,  288,   89,   89,   89,   90,  134,  135,   90,   89,

       89,   89,   89,   89,   89,   89,  194,   89,  194,   89,
      368,  369,  263,  289,  194,  285,  270,   89,   89,   89,
      244,  152,  244,  254,  255,  253,  244,  244,  458,  244,
      293,  294,  319,  194,  317,  418,  286,  152,  165,  152,
      244,  194,  263,  253,  194,  165,   89,   89,   89,   89,
      459,  244,  460,  244,  254,  255,  262,  244,  244,  194,
      244,  152,  319,  152,  317,  290,  286,  194,  269,  244,
      244,  244,  165,  194,  194,   89,   89,  965,  194,  965,
      965,  965,  965,  965,  965,  965,  262,  244,  193,  244,
      478,  254,  255,  244,  256,  290,  256,  253,  269,  458,

      244,  244,  194,  253,  166,  167,  194,  244,  460,  254,
      255,  166,  167,  459,  253,  193,  193,  193,  193,  246,
      246,  253,  246,  246,  246,  246,  246,  247,  264,  268,
      246,  265,  246,  458,  249,  266,  244,  256,  166,  167,
      165,  360,  246,  246,  246,  267,  330,  360,  253,  575,
      195,  196,  196,  196,  196,  196,  196,  196,  264,  268,
      576,  265,  446,  254,  255,  266,  271,  272,  297,  254,
      255,  246,  246,  246,  432,  267,  330,  165,  432,  165,
      254,  255,  194,  244,  194,  244,  603,  254,  255,  244,
      256,  298,  256,  253,  407,  165,  271,  272,  297,  194,

      250,  251,  163,  244,  163,  296,  166,  167,  163,  163,
      299,  163,  165,  604,  254,  255,  194,  163,  333,  163,
      165,  298,  163,  163,  168,  165,  168,  165,  621,  165,
      152,  165,  244,  256,  300,  296,  260,  163,  318,  367,
      299,  965,  965,  166,  167,  166,  167,  165,  333,  165,
      303,  163,  163,  301,  302,  304,  360,  165,  194,  254,
      255,  166,  167,  194,  300,  253,  163,  168,  318,  307,
      165,  306,  305,  477,  320,  165,  324,  321,  166,  167,
      303,  329,  331,  301,  302,  304,  166,  167,  332,  194,
      194,  166,  167,  166,  167,  166,  167,  166,  167,  307,

      308,  306,  305,  309,  320,  194,  324,  321,  358,  368,
      369,  329,  331,  166,  167,  166,  167,  194,  332,  359,
      194,  194,  253,  166,  167,  226,  227,  194,  194,  194,
      308,  254,  255,  309,  194,  194,  166,  167,  358,  326,
      194,  166,  167,  312,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  322,  314,  315,
      315,  315,  315,  315,  315,  315,  312,  312,  312,  326,
      327,  334,  323,  335,  337,  338,  336,  339,  192,  253,
      341,  194,  340,  226,  227,  350,  344,  322,  254,  255,
      328,  345,  346,  226,  227,  312,  312,  312,  312,  192,

      327,  334,  323,  335,  337,  338,  336,  339,  194,  194,
      341,  349,  340,  194,  351,  350,  344,  194,  194,  310,
      328,  345,  346,  194,  316,  194,  194,  226,  227,  347,
      194,  354,  194,  352,  226,  227,  226,  227,  348,  353,
      172,  349,  355,  356,  351,  254,  255,  382,  226,  227,
      226,  227,  226,  227,  383,  384,  226,  227,  244,  347,
      244,  354,  385,  352,  244,  244,  152,  244,  348,  353,
      226,  227,  355,  356,  152,  226,  227,  382,  244,  152,
      152,  386,  226,  227,  383,  384,  226,  227,  152,  387,
      226,  227,  385,  253,  591,  226,  227,  277,  253,  408,

      391,  388,  253,  273,  253,  592,  253,  244,  244,  246,
      246,  386,  246,  246,  246,  246,  246,  247,  372,  387,
      246,  371,  246,  415,  249,  152,  373,  374,  243,  408,
      391,  388,  246,  246,  246,  244,  376,  244,  226,  227,
      239,  244,  256,  253,  256,  253,  393,  411,  372,  447,
      461,  371,  253,  415,  194,  244,  373,  374,  375,  254,
      255,  246,  246,  246,  254,  255,  376,  224,  254,  255,
      254,  255,  254,  255,  377,  194,  393,  411,  194,  447,
      461,  152,  194,  253,  244,  256,  152,  253,  375,  192,
      250,  251,  246,  246,  389,  246,  246,  246,  246,  246,

      247,  390,  378,  246,  377,  246,  379,  249,  152,  254,
      255,  254,  255,  381,  189,  246,  246,  246,  254,  255,
      162,  392,  226,  227,  389,  253,  416,  420,  165,  152,
      165,  390,  378,  143,  396,  165,  379,  165,  449,  253,
      380,  965,  165,  381,  246,  246,  246,  575,  546,  254,
      255,  392,  165,  254,  255,  397,  416,  420,  576,  395,
      965,  458,  194,  394,  165,  625,  152,  253,  965,  165,
      380,  194,  165,  250,  251,  246,  246,  400,  246,  246,
      246,  246,  246,  361,  398,  397,  363,  399,  246,  395,
      246,  254,  255,  394,  166,  167,  166,  167,  246,  246,

      246,  166,  167,  166,  167,  254,  255,  400,  166,  167,
      462,  965,  463,  510,  398,  194,  965,  399,  166,  167,
      311,  311,  311,  311,  311,  311,  311,  246,  246,  246,
      166,  167,  165,  254,  255,  166,  167,  165,  166,  167,
      462,  165,  463,  510,  965,  165,  311,  311,  311,  311,
      311,  311,  311,  401,  402,  405,  364,  365,  246,  246,
      403,  246,  246,  246,  246,  246,  360,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  401,  402,  405,  413,  165,  409,  165,
      403,  410,  412,  414,  417,  419,  421,  422,  166,  167,

      423,  965,  621,  166,  167,  428,  426,  166,  167,  404,
      406,  166,  167,  152,  226,  227,  413,  965,  409,  965,
      608,  410,  412,  414,  417,  419,  421,  422,  600,  965,
      423,  194,  194,  165,  965,  428,  426,  194,  965,  404,
      406,  194,  965,  424,  194,  194,  194,  425,  194,  194,
      194,  965,  194,  166,  167,  166,  167,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
      312,  427,  407,  424,  429,  431,  435,  425,  430,  591,
      312,  312,  312,  965,  434,  436,  511,  433,  226,  227,
      592,  442,  459,  965,  194,  194,  152,  226,  227,  166,

      167,  427,  194,  165,  429,  431,  435,  464,  430,  312,
      312,  312,  312,  194,  434,  436,  511,  433,  226,  227,
      194,  442,  194,  194,  226,  227,  965,  226,  227,  226,
      227,  965,  459,  226,  227,  437,  438,  464,  316,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  439,  314,  315,  315,  315,  315,  315,
      315,  315,  312,  312,  312,  437,  438,  441,  443,  166,
      167,  460,  520,  522,  523,  965,  253,  965,  642,  444,
      440,  445,  165,  439,  690,  253,  226,  227,  253,  226,
      227,  312,  312,  312,  312,  152,  965,  441,  443,  253,

      226,  227,  520,  522,  523,  448,  226,  227,  450,  444,
      440,  445,  226,  227,  453,  253,  454,  253,  226,  227,
      316,  312,  407,  312,  312,  312,  312,  312,  312,  312,
      226,  227,  313,  226,  227,  448,  226,  227,  450,  451,
      253,  455,  254,  255,  453,  194,  454,  524,  166,  167,
      253,  254,  255,  165,  254,  255,  165,  965,  152,  313,
      313,  313,  313,  762,  165,  254,  255,  253,  456,  451,
      253,  455,  152,  465,  763,  452,  473,  524,  467,  468,
      253,  254,  255,  254,  255,  457,  965,  165,  313,  246,
      246,  466,  246,  246,  246,  246,  246,  361,  456,  165,

      246,  965,  246,  465,  246,  452,  254,  255,  467,  468,
      469,  965,  246,  246,  246,  457,  254,  255,  475,  166,
      167,  466,  166,  167,  165,  476,  295,  482,  965,  295,
      166,  167,  965,  254,  255,  965,  254,  255,  165,  470,
      469,  246,  246,  246,  165,  644,  254,  255,  475,  165,
      965,  471,  483,  166,  167,  476,  194,  482,  484,  472,
      194,  253,  480,  487,  486,  166,  167,  965,  474,  470,
      364,  365,  246,  246,  194,  246,  246,  246,  246,  246,
      361,  471,  483,  246,  485,  246,  965,  246,  484,  472,
      166,  167,  480,  487,  486,  246,  246,  246,  474,  488,

      194,  194,  194,  490,  166,  167,  489,  194,  492,  504,
      166,  167,  493,  568,  485,  166,  167,  194,  194,  774,
      965,  518,  226,  227,  246,  246,  246,  254,  255,  488,
      775,  690,  253,  490,  194,  965,  489,  762,  492,  504,
      165,  194,  493,  568,  226,  227,  194,  965,  763,  194,
      491,  494,  495,  364,  365,  246,  246,  194,  246,  246,
      246,  246,  246,  360,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      491,  494,  495,  496,  497,  498,  502,  501,  503,  500,
      965,  499,  965,  774,  506,  194,  505,  507,  254,  255,

      253,  194,  965,  194,  775,  508,  166,  167,  194,  460,
      537,  538,  539,  496,  497,  498,  502,  501,  503,  500,
      509,  499,  226,  227,  506,  512,  505,  507,  965,  226,
      227,  194,  226,  227,  194,  508,  226,  227,  226,  227,
      226,  227,  226,  227,  226,  227,  253,  152,  253,  521,
      509,  226,  227,  253,  152,  512,  226,  227,  226,  227,
      253,  513,  253,  152,  525,  165,  254,  255,  526,  536,
      516,  165,  550,  515,  194,  165,  542,  517,  514,  521,
      473,  165,  652,  652,  652,  965,  165,  527,  965,  965,
      479,  513,  530,  528,  525,  531,  481,  165,  526,  536,

      516,  794,  550,  515,  547,  529,  542,  517,  514,  533,
      194,  194,  254,  255,  254,  255,  532,  527,  194,  254,
      255,  534,  530,  528,  535,  531,  254,  255,  254,  255,
      541,  166,  167,  799,  547,  529,  543,  166,  167,  533,
      544,  166,  167,  545,  548,  551,  532,  166,  167,  549,
      965,  534,  166,  167,  535,  194,  823,  552,  553,  194,
      541,  554,  253,  166,  167,  555,  543,  824,  556,  557,
      544,  558,  559,  545,  548,  551,  560,  965,  194,  549,
      194,  965,  194,  561,  965,  573,  194,  552,  553,  562,
      565,  554,  194,  194,  253,  555,  253,  194,  556,  557,

      194,  558,  559,  563,  965,  194,  560,  226,  227,  253,
      194,  194,  194,  561,  226,  227,  194,  564,  567,  562,
      565,  566,  569,  253,  152,  226,  227,  518,  254,  255,
      965,  226,  227,  563,  226,  227,  253,  577,  578,  226,
      227,  579,  571,  570,  580,  226,  227,  564,  567,  581,
      152,  566,  569,  226,  227,  583,  574,  226,  227,  165,
      254,  255,  254,  255,  152,  582,  572,  577,  578,  226,
      227,  579,  571,  570,  580,  254,  255,  165,  588,  581,
      165,  584,  165,  590,  165,  583,  574,  165,  593,  254,
      255,  595,  585,  596,  599,  582,  572,  586,  598,  965,

      253,  594,  254,  255,  589,  825,  597,  601,  588,  836,
      606,  584,  253,  590,  965,  587,  826,  965,  593,  965,
      837,  595,  585,  596,  599,  166,  167,  586,  598,  602,
      194,  594,  605,  607,  589,  194,  597,  601,  194,  609,
      606,  610,  194,  166,  167,  587,  166,  167,  166,  167,
      166,  167,  194,  166,  167,  611,  194,  194,  194,  602,
      612,  613,  605,  607,  194,  614,  254,  255,  194,  609,
      253,  610,  253,  617,  618,  226,  227,  619,  254,  255,
      620,  965,  194,  622,  822,  611,  616,  615,  165,  621,
      612,  613,  226,  227,  152,  614,  628,  226,  227,  631,

      165,  626,  165,  617,  618,  629,  165,  619,  965,  965,
      620,  226,  227,  622,  226,  227,  616,  615,  630,  632,
      633,  634,  624,  635,  603,  604,  628,  965,  965,  631,
      627,  626,  640,  965,  608,  965,  254,  255,  254,  255,
      636,  665,  665,  666,  637,  645,  646,  621,  630,  632,
      633,  634,  624,  635,  166,  167,  641,  194,  194,  647,
      627,  194,  640,  194,  638,  639,  166,  167,  166,  167,
      636,  194,  166,  167,  637,  645,  646,  194,  643,  650,
      253,  651,  194,  194,  253,  653,  641,  654,  655,  647,
      656,  226,  227,  648,  638,  639,  226,  227,  152,  152,

      662,  965,  165,  649,  165,  194,  667,  679,  643,  650,
      664,  651,  668,  657,  672,  653,  965,  654,  655,  661,
      656,  965,  669,  648,  659,  659,  659,  670,  658,  671,
      662,  663,  673,  649,  675,  839,  667,  660,  644,  965,
      664,  965,  668,  657,  672,  674,  254,  255,  678,  661,
      254,  255,  669,  194,  680,  680,  680,  670,  658,  671,
      685,  663,  673,  194,  675,  194,  253,  681,  166,  167,
      166,  167,  292,  194,  965,  674,  686,  676,  678,  677,
      194,  684,  194,  688,  226,  227,  682,  682,  682,  689,
      685,  652,  652,  652,  691,  152,  165,  690,  695,  683,

      700,  226,  227,  166,  167,  703,  686,  676,  165,  677,
      701,  684,  194,  688,  659,  659,  659,  965,  965,  689,
      665,  665,  665,  687,  691,  692,  694,  693,  695,  702,
      700,  704,  254,  255,  194,  703,  965,  705,  706,  679,
      701,  367,  293,  294,  665,  665,  666,  696,  194,  707,
      708,  709,  687,  687,  965,  692,  694,  965,  965,  702,
      965,  704,  166,  167,  253,  254,  255,  705,  706,  697,
      194,  698,  699,  194,  166,  167,  687,  696,  712,  707,
      708,  709,  687,  710,  680,  680,  680,  226,  227,  713,
      682,  682,  682,  714,  715,  716,  690,  681,  718,  697,

      965,  698,  699,  711,  152,  721,  687,  165,  712,  722,
      723,  368,  369,  710,  724,  725,  726,  727,  728,  713,
      729,  717,  965,  714,  715,  716,  965,  730,  718,  719,
      254,  255,  720,  732,  731,  721,  733,  734,  735,  722,
      723,  736,  152,  965,  724,  725,  726,  727,  728,  253,
      729,  717,  194,  737,  738,  739,  194,  730,  740,  719,
      741,  165,  720,  732,  731,  744,  733,  734,  745,  746,
      742,  736,  194,  166,  167,  194,  755,  747,  748,  749,
      750,  751,  752,  737,  738,  739,  839,  753,  740,  743,
      741,  757,  754,  758,  965,  744,  760,  152,  745,  746,

      742,  735,  761,  764,  765,  766,  194,  747,  748,  749,
      750,  751,  752,  770,  152,  254,  255,  753,  769,  743,
      756,  757,  754,  758,  759,  767,  760,  166,  167,  194,
      194,  165,  761,  764,  765,  766,  194,  771,  772,  776,
      777,  778,  768,  770,  779,  780,  783,  755,  769,  784,
      756,  785,  786,  787,  759,  767,  152,  788,  789,  773,
      194,  165,  790,  791,  795,  796,  797,  771,  772,  776,
      777,  778,  768,  792,  779,  780,  783,  801,  793,  784,
      800,  785,  786,  787,  798,  802,  781,  788,  789,  194,
      194,  782,  790,  791,  795,  796,  797,  166,  167,  803,

      194,  807,  804,  792,  805,  806,  810,  801,  793,  811,
      800,  812,  813,  794,  798,  802,  781,  817,  152,  819,
      820,  782,  165,  965,  799,  827,  828,  166,  167,  803,
      829,  194,  804,  814,  805,  806,  810,  815,  830,  811,
      807,  812,  813,  833,  834,  808,  839,  817,  194,  819,
      820,  835,  838,  816,  965,  827,  828,  165,  822,  755,
      829,  840,  841,  814,  821,  818,  843,  815,  830,  844,
      845,  847,  848,  833,  834,  808,  194,  849,  850,  831,
      851,  835,  838,  816,  832,  852,  823,  853,  166,  167,
      842,  840,  841,  825,  821,  836,  843,  824,  846,  844,

      845,  847,  848,  756,  826,  839,  837,  849,  850,  831,
      851,  855,  857,  859,  832,  852,  860,  853,  861,  862,
      842,  863,  864,  166,  167,  865,  866,  867,  846,  868,
      869,  870,  871,  756,  872,  863,  873,  874,  876,  877,
      807,  855,  857,  859,  965,  854,  860,  880,  861,  862,
      881,  882,  864,  883,  889,  865,  866,  867,  884,  868,
      869,  870,  871,  885,  872,  782,  873,  874,  876,  877,
      886,  887,  888,  890,  875,  854,  891,  880,  892,  893,
      881,  882,  894,  883,  808,  895,  896,  897,  884,  899,
      889,  900,  901,  885,  903,  782,  904,  905,  832,  902,

      886,  887,  888,  890,  875,  906,  891,  907,  892,  893,
      908,  911,  894,  915,  808,  895,  896,  897,  916,  899,
      909,  900,  901,  913,  903,  917,  904,  905,  832,  898,
      918,  910,  920,  909,  914,  906,  913,  907,  921,  912,
      908,  911,  923,  915,  910,  924,  925,  914,  916,  922,
      919,  928,  921,  929,  930,  917,  925,  926,  931,  898,
      918,  932,  920,  922,  933,  934,  935,  926,  936,  912,
      937,  938,  923,  939,  940,  924,  941,  943,  946,  942,
      948,  928,  949,  929,  930,  945,  951,  952,  931,  954,
      927,  932,  955,  956,  933,  934,  935,  957,  936,  958,

      937,  938,  959,  939,  940,  944,  941,  943,  946,  962,
      948,  947,  949,  960,  960,  963,  951,  952,  965,  954,
      927,  965,  955,  956,  961,  961,  964,  957,  965,  958,
      965,  963,  959,  965,  965,  944,  965,  965,  965,  962,
      965,  947,  964,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,

       89,   89,   89,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  151,  965,  965,  965,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  164,  164,
      965,  164,  164,  164,  965,  164,  164,  164,  169,  965,
      965,  169,  965,  169,  167,  167,  167,  167,  190,  190,
      190,  190,  965,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  191,  965,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  193,  965,

      965,  193,  965,  193,  225,  225,  965,  225,  225,  965,
      965,  225,  225,  225,  227,  227,  227,  227,  240,  240,
      965,  965,  240,  245,  245,  245,  245,  965,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  248,  965,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  252,  252,  965,  252,  252,  252,  965,
      252,  252,  252,  257,  965,  965,  257,  965,  257,  255,
      255,  255,  255,  275,  965,  965,  965,  965,  275,  275,
      275,  965,  275,  284,  965,  965,  965,  284,  284,  284,
      284,  284,  284,  965,  284,  284,  284,  284,  291,  291,

      291,  291,  291,  965,  965,  291,  291,  291,  171,  171,
      171,  171,  295,  965,  965,  295,  965,  295,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  342,  342,  342,  342,  965,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  343,  343,
      343,  343,  343,  965,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  246,  965,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  248,  965,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  362,  965,  362,  362,  362,  362,  362,

      362,  362,  362,  362,  362,  362,  362,  362,  251,  965,
      251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
      251,  251,  251,  252,  252,  965,  252,  252,  252,  965,
      252,  252,  252,  366,  366,  366,  366,  366,  965,  965,
      366,  366,  366,  255,  255,  255,  255,  257,  965,  965,
      257,  965,  257,  259,  259,  259,  259,  370,  965,  965,
      370,  965,  370,  275,  965,  965,  965,  965,  275,  275,
      275,  965,  275,  284,  965,  965,  965,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  284,  151,  965,
      965,  965,  151,  151,  151,  151,  151,  151,  151,  151,

      151,  151,  151,  291,  291,  965,  291,  291,  965,  965,
      291,  291,  291,  294,  294,  294,  294,  164,  164,  965,
      164,  164,  164,  965,  164,  164,  164,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
      312,  312,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  193,  965,  965,
      193,  965,  193,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  225,  225,  965,  225,  225,  965,  965,

      225,  225,  225,  240,  240,  965,  965,  240,  246,  965,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  362,  965,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  365,  965,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  366,  366,  965,  366,  366,  965,  965,
      366,  366,  366,  369,  369,  369,  369,  519,  965,  965,
      965,  965,  519,  519,  965,  965,  519,  540,  965,  965,
      965,  965,  540,  540,  965,  965,  540,  878,  878,  878,
      878,  878,  878,  878,  878,  878,  878,  878,  878,  878,

      878,  878,   21,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965
    } ;

static const flex_int16_t yy_chk[4187] =
    {   0,
        0,    1,    1,    1,    1,   13,   13,   13,   13,   14,
       14,   14,   14,   19,   19,   19,   19,   37,   20,   20,
       20,   20,   23,   35,  951,   23,   38,   19,    1,   28,
        1,    1,   20,   33,   28,   29,   33,    1,   34,  948,
       26,    1,   31,   30,   44,   38,   37,   33,    1,   39,
       48,   48,  943,   27,  940,   36,  911,   35,    1,   28,
        1,    1,   52,   34,   28,   29,   40,    1,   50,   36,
       26,    1,   31,   30,   36,   38,   37,   39,    1,    2,
        2,    2,    2,   27,   47,   47,   52,   35,   59,  893,
       73,   40,   50,   34,   43,   61,   43,   85,   61,   36,

       43,   43,   50,   43,   36,  411,    2,   39,    2,    2,
       44,   44,   53,  878,   43,    2,   52,  108,   75,    2,
       73,   40,   50,   81,   93,   93,    2,   85,   52,   52,
       90,   53,   50,   90,   50,   50,    2,   73,    2,    2,
       54,  104,  104,   43,   43,    2,  109,  108,   75,    2,
       75,  412,   85,   81,   59,   59,    2,    3,    3,    3,
        3,   53,   74,   45,   49,   45,   55,  867,   54,   45,
       45,    3,   45,   45,   81,  858,  109,   56,   53,   53,
        3,   55,  411,   45,    3,   72,    3,    3,   56,   49,
        3,   72,   74,    3,  136,   49,  144,    3,   54,   87,

      856,   87,  414,   74,    3,  136,   54,   54,  121,  121,
      843,   55,   45,   45,    3,   72,    3,    3,   56,   49,
        3,   72,   77,    3,   84,   49,  144,    3,  412,   72,
       49,   49,   55,   55,    3,    4,    4,    4,    4,   45,
       45,   51,   80,   56,   56,  841,   78,   86,   76,    4,
       78,   80,   77,   76,   84,   51,   78,  813,    4,   77,
       51,   84,    4,   99,    4,    4,   51,  138,    4,   51,
      138,    4,   80,  796,   87,    4,   78,   86,   76,  414,
       78,   80,    4,   76,  142,   51,   78,  142,   86,   80,
       51,  274,    4,   99,    4,    4,   51,   78,    4,   51,

       76,    4,  274,   99,   99,    4,  787,   51,   51,  122,
      122,  748,    4,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   57,   11,  669,   11,   79,   79,
       96,   83,  169,  169,  655,   11,   11,   11,  145,   82,
       83,   82,   11,   57,   94,   82,  147,   94,  641,   57,

      148,  171,  171,  225,  225,  116,   11,  120,   79,   79,
       96,   83,   96,   96,   11,   11,   11,   11,  145,   82,
       83,   82,   11,   57,   94,   82,  147,   94,   83,   57,
      148,   95,   79,   97,   98,   95,   11,  100,   94,   94,
       57,   57,   82,   11,   11,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,  101,   12,  157,
       12,   95,  102,   97,   98,   95,  149,  100,   12,   12,
       12,  116,  116,  120,  120,   12,   98,   98,  100,  100,
      150,  157,   95,   95,   97,   97,  640,  101,  632,   12,
      153,  241,  102,  153,  227,  227,  149,   12,   12,   12,

       12,  601,  102,  102,  153,   12,  257,  257,  101,  101,
      150,  157,  195,  195,  195,  195,  195,  195,  195,   12,
      596,  241,  259,  259,  291,  291,   12,   12,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,

       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,  133,   17,  581,   17,  275,  294,  294,
      366,  366,  206,  579,   17,   17,   17,  159,  275,  556,
       68,   68,   68,   68,   68,   68,   68,   68,   69,   69,
       69,   69,   69,   69,   69,   69,  549,  129,  160,  154,
      165,  159,  206,   17,   17,   17,   17,   70,   70,   70,
       70,   70,   70,   70,   70,   71,   71,   71,   71,   71,
       71,   71,   71,  160,  539,  154,  129,  206,  124,  133,
      133,  159,   17,   17,   18,   18,   18,   18,   18,   18,

       18,   18,   18,   18,   18,   18,   68,   18,  538,   18,
      369,  369,  124,  160,   69,  154,  129,   18,   18,   18,
      112,  155,  112,  129,  129,  123,  112,  112,  388,  112,
      165,  165,  200,   70,  198,  328,  155,  161,  164,  388,
      112,   71,  124,  128,  537,  167,   18,   18,   18,   18,
      389,  114,  390,  114,  124,  124,  123,  114,  114,  535,
      114,  389,  200,  390,  198,  161,  155,  495,  128,  112,
      112,  114,  178,  493,  200,   18,   18,   88,  198,   88,
       88,   88,   88,   88,   88,   88,  123,  117,   88,  117,
      478,  123,  123,  117,  117,  161,  117,  117,  128,  458,

      114,  114,  328,  125,  164,  164,  426,  117,  384,  128,
      128,  167,  167,  383,  127,   88,   88,   88,   88,  115,
      115,  126,  115,  115,  115,  115,  115,  115,  125,  127,
      115,  125,  115,  382,  115,  126,  117,  117,  178,  178,
      175,  363,  115,  115,  115,  126,  210,  360,  130,  519,
      196,  196,  196,  196,  196,  196,  196,  196,  125,  127,
      519,  125,  357,  117,  117,  126,  130,  130,  175,  125,
      125,  115,  115,  115,  343,  126,  210,  176,  342,  174,
      127,  127,  318,  131,  317,  131,  552,  126,  126,  131,
      131,  176,  131,  131,  312,  177,  130,  130,  175,  210,

      115,  115,  163,  131,  163,  174,  175,  175,  163,  163,
      177,  163,  179,  553,  130,  130,  196,  168,  213,  168,
      182,  176,  163,  168,  168,  180,  168,  168,  597,  181,
      284,  183,  131,  131,  179,  174,  261,  168,  199,  253,
      177,  370,  370,  176,  176,  174,  174,  184,  213,  185,
      182,  163,  163,  180,  181,  183,  246,  186,  213,  131,
      131,  177,  177,  552,  179,  252,  168,  168,  199,  186,
      187,  185,  184,  410,  201,  188,  204,  201,  179,  179,
      182,  209,  211,  180,  181,  183,  182,  182,  212,  199,
      553,  180,  180,  168,  168,  181,  181,  183,  183,  186,

      187,  185,  184,  188,  201,  597,  204,  201,  242,  253,
      253,  209,  211,  184,  184,  185,  185,  201,  212,  245,
      204,  205,  255,  186,  186,  442,  442,  209,  203,  212,
      187,  252,  252,  188,  193,  211,  187,  187,  242,  207,
      410,  188,  188,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  202,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  207,
      208,  214,  202,  215,  217,  218,  216,  219,  192,  269,
      221,  207,  220,  498,  498,  232,  228,  202,  255,  255,
      208,  229,  229,  505,  505,  197,  197,  197,  197,  191,

      208,  214,  202,  215,  217,  218,  216,  219,  202,  214,
      221,  231,  220,  215,  233,  232,  228,  217,  221,  190,
      208,  229,  229,  208,  197,  216,  220,  228,  228,  230,
      218,  236,  219,  234,  229,  229,  232,  232,  230,  235,
      173,  231,  237,  238,  233,  269,  269,  278,  231,  231,
      233,  233,  561,  561,  279,  280,  564,  564,  244,  230,
      244,  236,  281,  234,  244,  244,  285,  244,  230,  235,
      234,  234,  237,  238,  158,  236,  236,  278,  244,  288,
      156,  282,  230,  230,  279,  280,  237,  237,  151,  283,
      235,  235,  281,  262,  540,  238,  238,  140,  264,  319,

      288,  285,  265,  135,  263,  540,  267,  244,  244,  247,
      247,  282,  247,  247,  247,  247,  247,  247,  263,  283,
      247,  262,  247,  325,  247,  290,  264,  265,  111,  319,
      288,  285,  247,  247,  247,  256,  267,  256,  566,  566,
      106,  256,  256,  266,  256,  256,  290,  321,  263,  358,
      385,  262,  268,  325,  319,  256,  264,  265,  266,  262,
      262,  247,  247,  247,  264,  264,  267,   92,  265,  265,
      263,  263,  267,  267,  268,  325,  290,  321,  321,  358,
      385,  286,   66,  272,  256,  256,  287,  270,  266,   65,
      247,  247,  248,  248,  286,  248,  248,  248,  248,  248,

      248,  287,  270,  248,  268,  248,  270,  248,  289,  266,
      266,  256,  256,  272,   63,  248,  248,  248,  268,  268,
       42,  289,  567,  567,  286,  271,  326,  330,  296,   32,
      297,  287,  270,   25,  298,  298,  270,  301,  372,  372,
      271,   21,  299,  272,  248,  248,  248,  575,  484,  272,
      272,  289,  303,  270,  270,  299,  326,  330,  575,  297,
        0,  394,  330,  296,  302,  584,  584,  373,    0,  300,
      271,  326,  394,  248,  248,  249,  249,  303,  249,  249,
      249,  249,  249,  249,  300,  299,  249,  302,  249,  297,
      249,  271,  271,  296,  296,  296,  297,  297,  249,  249,

      249,  298,  298,  301,  301,  372,  372,  303,  299,  299,
      386,    0,  387,  446,  300,  484,    0,  302,  303,  303,
      311,  311,  311,  311,  311,  311,  311,  249,  249,  249,
      302,  302,  304,  373,  373,  300,  300,  308,  394,  394,
      386,  305,  387,  446,    0,  306,  314,  314,  314,  314,
      314,  314,  314,  304,  305,  308,  249,  249,  250,  250,
      306,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  304,  305,  308,  323,  307,  320,  309,
      306,  320,  322,  324,  327,  329,  331,  332,  304,  304,

      333,    0,  582,  308,  308,  338,  336,  305,  305,  307,
      309,  306,  306,  582,  610,  610,  323,    0,  320,    0,
      558,  320,  322,  324,  327,  329,  331,  332,  548,    0,
      333,  320,  331,  399,    0,  338,  336,  323,    0,  307,
      309,  333,    0,  334,  324,  322,  329,  335,  336,  327,
      332,    0,  338,  307,  307,  309,  309,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  337,  313,  334,  339,  341,  346,  335,  340,  591,
      313,  313,  313,    0,  345,  347,  447,  344,  612,  612,
      591,  353,  397,    0,  334,  548,  391,  558,  558,  399,

      399,  337,  335,  397,  339,  341,  346,  391,  340,  313,
      313,  313,  313,  340,  345,  347,  447,  344,  346,  346,
      341,  353,  337,  339,  344,  344,    0,  345,  345,  347,
      347,    0,  459,  353,  353,  348,  349,  391,  313,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  350,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  348,  349,  352,  354,  397,
      397,  398,  459,  461,  462,    0,  371,    0,  607,  355,
      351,  356,  398,  350,  657,  374,  348,  348,  378,  349,
      349,  315,  315,  315,  315,  657,    0,  352,  354,  377,

      709,  709,  459,  461,  462,  371,  350,  350,  374,  355,
      351,  356,  354,  354,  377,  375,  378,  379,  352,  352,
      315,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      355,  355,  316,  351,  351,  371,  356,  356,  374,  375,
      380,  379,  371,  371,  377,  607,  378,  463,  398,  398,
      376,  374,  374,  395,  378,  378,  400,    0,  392,  316,
      316,  316,  316,  738,  396,  377,  377,  381,  380,  375,
      450,  379,  393,  392,  738,  376,  405,  463,  395,  396,
      452,  375,  375,  379,  379,  381,    0,  405,  316,  361,
      361,  393,  361,  361,  361,  361,  361,  361,  380,  401,

      361,    0,  361,  392,  361,  376,  380,  380,  395,  396,
      401,    0,  361,  361,  361,  381,  376,  376,  408,  395,
      395,  393,  400,  400,  402,  409, 1010,  415,    0, 1010,
      396,  396,    0,  381,  381,    0,  450,  450,  403,  402,
      401,  361,  361,  361,  404,  609,  452,  452,  408,  406,
        0,  403,  416,  405,  405,  409,  408,  415,  417,  404,
      409,  454,  413,  420,  419,  401,  401,    0,  406,  402,
      361,  361,  362,  362,  415,  362,  362,  362,  362,  362,
      362,  403,  416,  362,  418,  362,    0,  362,  417,  404,
      402,  402,  413,  420,  419,  362,  362,  362,  406,  421,

      413,  420,  417,  423,  403,  403,  422,  416,  425,  439,
      404,  404,  427,  510,  418,  406,  406,  419,  418,  749,
        0,  457,  609,  609,  362,  362,  362,  454,  454,  421,
      749,  671,  457,  423,  421,    0,  422,  762,  425,  439,
      472,  423,  427,  510,  439,  439,  425,    0,  762,  427,
      424,  428,  429,  362,  362,  364,  364,  422,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      424,  428,  429,  430,  431,  433,  437,  436,  438,  435,
        0,  434,    0,  774,  441,  428,  440,  443,  457,  457,

      448,  424,    0,  429,  774,  444,  472,  472,  671,  460,
      477,  477,  477,  430,  431,  433,  437,  436,  438,  435,
      445,  434,  437,  437,  441,  448,  440,  443,    0,  438,
      438,  431,  441,  441,  430,  444,  433,  433,  434,  434,
      435,  435,  436,  436,  440,  440,  449,  464,  451,  460,
      445,  443,  443,  455,  465,  448,  445,  445,  444,  444,
      453,  449,  456,  466,  464,  467,  448,  448,  465,  476,
      455,  468,  488,  453,  477,  469,  480,  456,  451,  460,
      473,  470,  619,  619,  619,    0,  471,  466,    0,    0,
      479,  449,  469,  467,  464,  470,  481,  474,  465,  476,

      455,  769,  488,  453,  485,  468,  480,  456,  451,  473,
      488,  476,  449,  449,  451,  451,  471,  466,  480,  455,
      455,  474,  469,  467,  475,  470,  453,  453,  456,  456,
      479,  467,  467,  776,  485,  468,  481,  468,  468,  473,
      482,  469,  469,  483,  486,  489,  471,  470,  470,  487,
        0,  474,  471,  471,  475,  475,  801,  490,  491,  485,
      479,  492,  516,  474,  474,  494,  481,  801,  496,  497,
      482,  499,  500,  483,  486,  489,  501,    0,  769,  487,
      486,    0,  482,  502,    0,  517,  487,  490,  491,  503,
      507,  492,  483,  490,  512,  494,  517,  489,  496,  497,

      491,  499,  500,  504,    0,  496,  501,  499,  499,  513,
      776,  497,  494,  502,  501,  501,  492,  506,  509,  503,
      507,  508,  512,  514,  526,  500,  500,  518,  516,  516,
        0,  503,  503,  504,  502,  502,  515,  520,  521,  504,
      504,  522,  514,  513,  523,  507,  507,  506,  509,  524,
      525,  508,  512,  506,  506,  526,  518,  508,  508,  528,
      512,  512,  517,  517,  527,  525,  515,  520,  521,  509,
      509,  522,  514,  513,  523,  513,  513,  529,  533,  524,
      532,  527,  530,  536,  531,  526,  518,  534,  541,  514,
      514,  543,  529,  544,  547,  525,  515,  530,  546,    0,

      569,  542,  515,  515,  534,  802,  545,  550,  533,  811,
      555,  527,  572,  536,    0,  531,  802,    0,  541,    0,
      811,  543,  529,  544,  547,  528,  528,  530,  546,  551,
      536,  542,  554,  557,  534,  546,  545,  550,  547,  559,
      555,  560,  544,  529,  529,  531,  532,  532,  530,  530,
      531,  531,  555,  534,  534,  562,  542,  545,  550,  551,
      563,  565,  554,  557,  551,  568,  569,  569,  554,  559,
      571,  560,  570,  573,  574,  559,  559,  577,  572,  572,
      578,    0,  557,  580,  800,  562,  571,  570,  585,  586,
      563,  565,  560,  560,  583,  568,  588,  562,  562,  593,

      586,  585,  587,  573,  574,  589,  589,  577,    0,    0,
      578,  563,  563,  580,  565,  565,  571,  570,  590,  594,
      595,  598,  583,  599,  603,  604,  588,    0,    0,  593,
      587,  585,  605,    0,  608,    0,  571,  571,  570,  570,
      600,  631,  631,  631,  602,  611,  613,  621,  590,  594,
      595,  598,  583,  599,  585,  585,  606,  598,  599,  614,
      587,  800,  605,  594,  603,  604,  586,  586,  587,  587,
      600,  590,  589,  589,  602,  611,  613,  600,  608,  617,
      615,  618,  602,  605,  616,  620,  606,  621,  622,  614,
      623,  613,  613,  615,  603,  604,  611,  611,  624,  625,

      628,    0,  629,  616,  627,  606,  633,  646,  608,  617,
      630,  618,  634,  624,  638,  620,    0,  621,  622,  627,
      623,    0,  635,  615,  626,  626,  626,  636,  625,  637,
      628,  629,  639,  616,  643,  827,  633,  626,  644,    0,
      630,    0,  634,  624,  638,  642,  615,  615,  645,  627,
      616,  616,  635,  634,  647,  647,  647,  636,  625,  637,
      650,  629,  639,  636,  643,  630,  649,  647,  629,  629,
      627,  627,  660,  635,    0,  642,  651,  644,  645,  644,
      637,  649,  642,  653,  646,  646,  648,  648,  648,  654,
      650,  652,  652,  652,  656,  658,  663,  661,  664,  648,

      667,  645,  645,  626,  626,  672,  651,  644,  661,  644,
      668,  649,  827,  653,  659,  659,  659,    0,    0,  654,
      665,  665,  665,  652,  656,  658,  663,  659,  664,  670,
      667,  673,  649,  649,  664,  672,    0,  674,  675,  679,
      668,  683,  660,  660,  666,  666,  666,  665,  668,  676,
      677,  678,  665,  652,    0,  658,  663,    0,    0,  670,
        0,  673,  663,  663,  684,  648,  648,  674,  675,  666,
      670,  666,  666,  674,  661,  661,  666,  665,  684,  676,
      677,  678,  665,  679,  680,  680,  680,  678,  678,  685,
      682,  682,  682,  687,  688,  689,  690,  680,  691,  666,

        0,  666,  666,  682,  692,  695,  666,  694,  684,  696,
      697,  683,  683,  679,  698,  699,  700,  701,  702,  685,
      703,  690,    0,  687,  688,  689,    0,  704,  691,  692,
      684,  684,  694,  706,  705,  695,  707,  710,  712,  696,
      697,  713,  719,    0,  698,  699,  700,  701,  702,  712,
      703,  690,  695,  714,  715,  716,  702,  704,  717,  692,
      718,  720,  694,  706,  705,  721,  707,  710,  722,  723,
      719,  713,  701,  694,  694,  705,  732,  724,  725,  726,
      727,  728,  729,  714,  715,  716,  814,  730,  717,  720,
      718,  733,  731,  734,    0,  721,  736,  814,  722,  723,

      719,  735,  737,  739,  740,  741,  721,  724,  725,  726,
      727,  728,  729,  745,  742,  712,  712,  730,  744,  720,
      732,  733,  731,  734,  735,  742,  736,  720,  720,  727,
      731,  743,  737,  739,  740,  741,  728,  746,  747,  750,
      751,  752,  743,  745,  753,  754,  756,  755,  744,  757,
      732,  758,  759,  760,  735,  742,  767,  761,  764,  773,
      744,  768,  765,  766,  770,  771,  772,  746,  747,  750,
      751,  752,  743,  767,  753,  754,  756,  778,  768,  757,
      777,  758,  759,  760,  773,  779,  755,  761,  764,  751,
      750,  755,  765,  766,  770,  771,  772,  743,  743,  780,

      754,  785,  781,  767,  782,  783,  788,  778,  768,  789,
      777,  790,  791,  794,  773,  779,  755,  795,  792,  797,
      798,  755,  793,    0,  799,  803,  804,  768,  768,  780,
      805,  777,  781,  792,  782,  783,  788,  793,  806,  789,
      807,  790,  791,  808,  809,  785,  815,  795,  780,  797,
      798,  810,  812,  794,    0,  803,  804,  815,  822,  830,
      805,  816,  817,  792,  799,  818,  819,  793,  806,  820,
      821,  828,  829,  808,  809,  785,  803,  831,  832,  807,
      833,  810,  812,  794,  807,  834,  823,  838,  793,  793,
      818,  816,  817,  825,  799,  836,  819,  823,  822,  820,

      821,  828,  829,  830,  825,  839,  836,  831,  832,  807,
      833,  840,  842,  844,  807,  834,  845,  838,  846,  847,
      818,  848,  849,  815,  815,  850,  851,  853,  822,  854,
      855,  857,  859,  830,  860,  863,  861,  862,  864,  865,
      866,  840,  842,  844,    0,  839,  845,  868,  846,  847,
      869,  870,  849,  871,  877,  850,  851,  853,  872,  854,
      855,  857,  859,  873,  860,  848,  861,  862,  864,  865,
      874,  875,  876,  880,  863,  839,  881,  868,  882,  883,
      869,  870,  884,  871,  866,  885,  887,  888,  872,  890,
      889,  891,  892,  873,  894,  848,  895,  896,  877,  902,

      874,  875,  876,  880,  863,  897,  881,  898,  882,  883,
      899,  901,  884,  904,  866,  885,  887,  888,  905,  890,
      900,  891,  892,  903,  894,  907,  895,  896,  877,  889,
      908,  900,  912,  909,  903,  897,  913,  898,  915,  902,
      899,  901,  916,  904,  909,  917,  918,  913,  905,  915,
      919,  920,  921,  923,  924,  907,  925,  918,  927,  889,
      908,  928,  912,  921,  930,  931,  932,  925,  933,  902,
      934,  935,  916,  937,  938,  917,  939,  941,  944,  942,
      946,  920,  947,  923,  924,  945,  949,  950,  927,  952,
      919,  928,  953,  954,  930,  931,  932,  955,  933,  956,

      934,  935,  957,  937,  938,  942,  939,  941,  944,  959,
      946,  945,  947,  958,  960,  962,  949,  950,    0,  952,
      919,    0,  953,  954,  958,  960,  962,  955,    0,  956,
        0,  963,  957,    0,    0,  942,    0,    0,    0,  959,
        0,  945,  963,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  967,  967,
      967,  967,  967,  967,  967,  967,  967,  967,  967,  967,
      967,  967,  967,  968,  968,  968,  968,  968,  968,  968,
      968,  968,  968,  968,  968,  968,  968,  968,  969,  969,
      969,  969,  969,  969,  969,  969,  969,  969,  969,  969,

      969,  969,  969,  970,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  971,  971,
      971,  971,  971,  971,  971,  971,  971,  971,  971,  971,
      971,  971,  971,  972,    0,    0,    0,  972,  972,  972,
      972,  972,  972,  972,  972,  972,  972,  972,  973,  973,
        0,  973,  973,  973,    0,  973,  973,  973,  974,    0,
        0,  974,    0,  974,  975,  975,  975,  975,  976,  976,
      976,  976,    0,  976,  976,  976,  976,  976,  976,  976,
      976,  976,  976,  977,    0,  977,  977,  977,  977,  977,
      977,  977,  977,  977,  977,  977,  977,  977,  978,    0,

        0,  978,    0,  978,  979,  979,    0,  979,  979,    0,
        0,  979,  979,  979,  980,  980,  980,  980,  981,  981,
        0,    0,  981,  982,  982,  982,  982,    0,  982,  982,
      982,  982,  982,  982,  982,  982,  982,  982,  983,    0,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  984,  984,    0,  984,  984,  984,    0,
      984,  984,  984,  985,    0,    0,  985,    0,  985,  986,
      986,  986,  986,  987,    0,    0,    0,    0,  987,  987,
      987,    0,  987,  988,    0,    0,    0,  988,  988,  988,
      988,  988,  988,    0,  988,  988,  988,  988,  989,  989,

      989,  989,  989,    0,    0,  989,  989,  989,  990,  990,
      990,  990,  991,    0,    0,  991,    0,  991,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  993,  993,  993,  993,    0,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  994,  994,
      994,  994,  994,    0,  994,  994,  994,  994,  994,  994,
      994,  994,  994,  995,    0,  995,  995,  995,  995,  995,
      995,  995,  995,  995,  995,  995,  995,  995,  996,    0,
      996,  996,  996,  996,  996,  996,  996,  996,  996,  996,
      996,  996,  996,  997,    0,  997,  997,  997,  997,  997,

      997,  997,  997,  997,  997,  997,  997,  997,  998,    0,
      998,  998,  998,  998,  998,  998,  998,  998,  998,  998,
      998,  998,  998,  999,  999,    0,  999,  999,  999,    0,
      999,  999,  999, 1000, 1000, 1000, 1000, 1000,    0,    0,
     1000, 1000, 1000, 1001, 1001, 1001, 1001, 1002,    0,    0,
     1002,    0, 1002, 1003, 1003, 1003, 1003, 1004,    0,    0,
     1004,    0, 1004, 1005,    0,    0,    0,    0, 1005, 1005,
     1005,    0, 1005, 1006,    0,    0,    0, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1007,    0,
        0,    0, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,

     1007, 1007, 1007, 1008, 1008,    0, 1008, 1008,    0,    0,
     1008, 1008, 1008, 1009, 1009, 1009, 1009, 1011, 1011,    0,
     1011, 1011, 1011,    0, 1011, 1011, 1011, 1012, 1012, 1012,
     1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012,
     1012, 1012, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,
     1013, 1013, 1013, 1013, 1013, 1013, 1013, 1014,    0,    0,
     1014,    0, 1014, 1015, 1015, 1015, 1015, 1015, 1015, 1015,
     1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1017, 1017,    0, 1017, 1017,    0,    0,

     1017, 1017, 1017, 1018, 1018,    0,    0, 1018, 1019,    0,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1020,    0, 1020, 1020, 1020, 1020, 1020,
     1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1021,    0,
     1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021,
     1021, 1021, 1021, 1022, 1022,    0, 1022, 1022,    0,    0,
     1022, 1022, 1022, 1023, 1023, 1023, 1023, 1024,    0,    0,
        0,    0, 1024, 1024,    0,    0, 1024, 1025,    0,    0,
        0,    0, 1025, 1025,    0,    0, 1025, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,

     1026, 1026,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[121] =
    {   0,
0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 
    1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 
    0,     };

static const flex_int16_t yy_rule_linenum[120] =
    {   0,
       76,  100,  109,  114,  116,  121,  134,  146,  158,  165,
      172,  180,  192,  204,  211,  218,  225,  232,  239,  246,
      253,  260,  267,  274,  281,  288,  295,  310,  311,  313,
      316,  320,  325,  341,  352,  359,  363,  370,  378,  386,
      397,  401,  407,  412,  418,  428,  437,  443,  450,  471,
      492,  493,  497,  502,  509,  516,  517,  518,  589,  647,
      649,  655,  659,  663,  677,  688,  696,  701,  711,  722,
      728,  735,  744,  753,  762,  771,  781,  800,  819,  839,
      841,  842,  843,  844,  845,  846,  867,  868,  872,  876,
      880,  881,  884,  887,  890,  893,  897,  898,  899,  900,

      901,  902,  903,  904,  905,  906,  907,  908,  912,  916,
      918,  922,  924,  934,  937,  946,  950,  954,  958
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "gix_esql_scanner.ll"
/* -*- c++ -*- */
#line 3 "gix_esql_scanner.ll"
#include <cerrno>
#include <climits>
#include <cstdlib>
#include <string>

#include "gix_esql_driver.hh"
#include "gix_esql_parser.hh"

int flag_insqlstring = 0;
int flag_selectcommand = 0;
int cursor_hold = 0;

int find_last_space(char * s);
int count_crlf(char *s);

//#define UNPUT_TOKEN() yyless(strlen(yytext));
#define UNPUT_TOKEN() { int i; char *yycopy = strdup( yytext ); for ( i = yyleng - 1; i >= 0; --i ) unput( yycopy[i] ); free( yycopy ); }

#define FLAG_LINKAGE_START	128

// Work around an incompatibility in flex (at least versions
// 2.5.31 through 2.5.33): it generates code that does
// not conform to C89.  See Debian bug 333231
// <http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=333231>.
# undef yywrap

// The location of the current token.
static yy::location loc;

// CHANGE: "Code run each time a pattern is matched" moved from its
// own block below (this change was not strictly necessary).
#define YY_USER_ACTION  loc.columns (yyleng);

// CHANGE: We must exclude unistd.h or the compiler will choke on the
// `isatty()` declaration emitted by `flex` having a different
// exception specifier from the one in `unistd.h`:
#define YY_NO_UNISTD_H

#line 1807 "gix_esql_scanner.cc"
/* Options: */
/* Regex abbreviations: */

/* STRVALUE "\""[^\"]+"\""|"\'"[^\'\n]*"\'" */
#line 1812 "gix_esql_scanner.cc"

#define INITIAL 0
#define PICTURE_STATE 1
#define SPECIAL_DECLARE_STATE 2
#define DATA_SECTION_STATE 3
#define ESQL_FUNC_STATE 4
#define ESQL_INCLUDE_STATE 5
#define ESQL_SELECT_STATE 6
#define ESQL_STATE 7
#define INCLUDE_STATE 8
#define FD_STATE 9

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */
/* %ok-for-header */

/* %not-for-header */
/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */
/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin.rdbuf(std::cin.rdbuf());
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout.rdbuf(std::cout.rdbuf());
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
/* %% [7.0] user's declarations go here */
#line 74 "gix_esql_scanner.ll"


#line 2016 "gix_esql_scanner.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 966 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 965 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 120 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 120 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 121 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 76 "gix_esql_scanner.ll"
{ 
		BEGIN ESQL_FUNC_STATE; 

		driver.startlineno = yylineno;
		driver.host_reference_list->clear();
		driver.res_host_reference_list->clear();
					
		driver.commandname = "";
		driver.cursorname = "";
		driver.sqlname = "";
		driver.incfilename = "";

		driver.hostreferenceCount = 0;
		driver.sql_list->clear();
		driver.period = 0;
		driver.cursor_hold = 0;
		driver.command_putother = 0;

		if (driver.lexer.src_location_stack.size() > 0 && !driver.lexer.src_location_stack.top().is_included)
			driver.has_esql_in_cbl_copybooks = true;

		return yy::gix_esql_parser::make_EXECSQL(loc);
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 100 "gix_esql_scanner.ll"
{
	if (driver.in_file_section) {
		yy_push_state(FD_STATE);
	}
	//return yy::gix_esql_parser::make_WORD(yytext, loc);
}
	YY_BREAK

case 3:
YY_RULE_SETUP
#line 109 "gix_esql_scanner.ll"
{    
		yy_pop_state();
		//return yy::gix_esql_parser::make_PERIOD(loc);
	}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 114 "gix_esql_scanner.ll"
{ }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 116 "gix_esql_scanner.ll"
{}
	YY_BREAK


case 6:
YY_RULE_SETUP
#line 121 "gix_esql_scanner.ll"
{
		BEGIN ESQL_STATE;
		flag_insqlstring = 1;
		flag_selectcommand = 1;

		driver.commandname = yytext;

		driver.sqlnum++;
		driver.sqlname.sprintf("SQ%04d", driver.sqlnum);

		return yy::gix_esql_parser::make_SELECT(yytext, loc);
	}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 134 "gix_esql_scanner.ll"
{
		BEGIN ESQL_STATE;
		flag_insqlstring = 1;

		driver.commandname = yytext;
					
		driver.sqlnum++;
		driver.sqlname.sprintf("SQ%04d", driver.sqlnum);

		return yy::gix_esql_parser::make_INSERT(yytext, loc);
	}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 146 "gix_esql_scanner.ll"
{
		BEGIN ESQL_STATE;
		flag_insqlstring = 1;

		driver.commandname = yytext;
					
		driver.sqlnum++;
		driver.sqlname.sprintf("SQ%04d", driver.sqlnum);

		return yy::gix_esql_parser::make_DELETE(yytext, loc);
	}		
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 158 "gix_esql_scanner.ll"
{
		BEGIN ESQL_STATE;

		driver.commandname = "CONNECT";
		return yy::gix_esql_parser::make_CONNECT(loc);
	}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 165 "gix_esql_scanner.ll"
{
		BEGIN ESQL_STATE;

		driver.commandname = "CONNECT_TO";
		return yy::gix_esql_parser::make_CONNECT_TO(loc);
	}		
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 172 "gix_esql_scanner.ll"
{
		BEGIN ESQL_STATE;

		driver.commandname = "CONNECT_RESET";
		return yy::gix_esql_parser::make_CONNECT_RESET(loc);
	}	
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 180 "gix_esql_scanner.ll"
{
		BEGIN ESQL_STATE;
		flag_insqlstring = 1;

		driver.commandname = yytext;
					
		driver.sqlnum++;
		driver.sqlname.sprintf("SQ%04d", driver.sqlnum);
		
		return yy::gix_esql_parser::make_DISCONNECT(yytext, loc);
	}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 192 "gix_esql_scanner.ll"
{
		BEGIN ESQL_STATE;
		flag_insqlstring = 1;

		driver.commandname = yytext;
					
		driver.sqlnum++;
		driver.sqlname.sprintf("SQ%04d", driver.sqlnum);
					
		return yy::gix_esql_parser::make_UPDATE(yytext, loc);
	}	
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 204 "gix_esql_scanner.ll"
{
		BEGIN ESQL_STATE;

		//return DECLARE;
		return yy::gix_esql_parser::make_DECLARE(loc);
	}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 211 "gix_esql_scanner.ll"
{
		BEGIN ESQL_STATE;
			driver.endlineno = yylineno;
    	    driver.commandname = "OPEN";
			return yy::gix_esql_parser::make_OPEN(loc);
    }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 218 "gix_esql_scanner.ll"
{
		BEGIN ESQL_STATE;

		driver.commandname = "EXECUTE";
		return yy::gix_esql_parser::make_EXECUTE(yytext, loc);
	}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 225 "gix_esql_scanner.ll"
{
		BEGIN ESQL_STATE;

		driver.commandname = "CLOSE";
		return yy::gix_esql_parser::make_CLOSE(loc);
	}  
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 232 "gix_esql_scanner.ll"
{
		BEGIN ESQL_STATE;

		driver.commandname = "FETCH";
		return yy::gix_esql_parser::make_FETCH(loc);
	}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 239 "gix_esql_scanner.ll"
{
		BEGIN ESQL_STATE;

		driver.commandname = "COMMIT_RELEASE";
		return yy::gix_esql_parser::make_COMMIT_WORK(loc);
	}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 246 "gix_esql_scanner.ll"
{
		BEGIN ESQL_STATE;

		driver.commandname = "COMMIT_RELEASE";
		return yy::gix_esql_parser::make_COMMIT_WORK(loc);
	}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 253 "gix_esql_scanner.ll"
{
		BEGIN ESQL_STATE;

		driver.commandname = "COMMIT";
		return yy::gix_esql_parser::make_COMMIT_WORK(loc);
	}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 260 "gix_esql_scanner.ll"
{
		BEGIN ESQL_STATE;

		driver.commandname = "COMMIT";
		return yy::gix_esql_parser::make_COMMIT_WORK(loc);
	}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 267 "gix_esql_scanner.ll"
{
		BEGIN ESQL_STATE;

		driver.commandname = "ROLLBACK_RELEASE";
		return yy::gix_esql_parser::make_ROLLBACK_WORK(loc);
	}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 274 "gix_esql_scanner.ll"
{
		BEGIN ESQL_STATE;

		driver.commandname = "ROLLBACK_RELEASE";
		return yy::gix_esql_parser::make_ROLLBACK_WORK(loc);
	}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 281 "gix_esql_scanner.ll"
{
		BEGIN ESQL_STATE;

		driver.commandname = "ROLLBACK";
		return yy::gix_esql_parser::make_ROLLBACK_WORK(loc);
	}     
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 288 "gix_esql_scanner.ll"
{
		BEGIN ESQL_STATE;

		driver.commandname = "ROLLBACK";
		return yy::gix_esql_parser::make_ROLLBACK_WORK(loc);
	}     
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 295 "gix_esql_scanner.ll"
{
		BEGIN ESQL_STATE;

		driver.commandname = yytext;
					
		driver.sqlnum++;
		driver.sqlname.sprintf("SQ%04d", driver.sqlnum);
		
		driver.command_putother = 1;
		return yy::gix_esql_parser::make_OTHERFUNC(yytext, loc);
	}
	YY_BREAK


case 28:
YY_RULE_SETUP
#line 310 "gix_esql_scanner.ll"
{ return yy::gix_esql_parser::make_USER(loc); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 311 "gix_esql_scanner.ll"
{ return yy::gix_esql_parser::make_TO(loc); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 313 "gix_esql_scanner.ll"
{
					return yy::gix_esql_parser::make_TOKEN(yytext, loc);
	          }
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 316 "gix_esql_scanner.ll"
{   }
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 320 "gix_esql_scanner.ll"
{ 
				ECHO; 
				}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 325 "gix_esql_scanner.ll"
{
			if(flag_insqlstring){
	      			//yylval.s = strdup (yytext);
	      			//return TOKEN;       
					return yy::gix_esql_parser::make_TOKEN(yytext, loc);
			}
			flag_insqlstring = 1;

			driver.commandname = yytext;
					
			driver.sqlnum++;
			driver.sqlname.sprintf("SQ%04d", driver.sqlnum);

			return yy::gix_esql_parser::make_SELECT(yytext, loc);
	}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 341 "gix_esql_scanner.ll"
{
			if(flag_insqlstring){
				if(!flag_selectcommand){
						return yy::gix_esql_parser::make_TOKEN(yytext, loc);
				} else {
		      			return yy::gix_esql_parser::make_SELECTFROM(yytext, loc);
				}
			}
			return yy::gix_esql_parser::make_FROM(loc);
	}  
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 352 "gix_esql_scanner.ll"
{
			if(flag_insqlstring){ 
					return yy::gix_esql_parser::make_TOKEN(yytext, loc);
			}
			return yy::gix_esql_parser::make_CURSOR(loc);
	 }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 359 "gix_esql_scanner.ll"
{
		return yy::gix_esql_parser::make_WITH_HOLD(1, loc);
	 }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 363 "gix_esql_scanner.ll"
{
			if(flag_insqlstring){
				return yy::gix_esql_parser::make_TOKEN(yytext, loc);   
			}
			return yy::gix_esql_parser::make_FOR(loc);
	}      
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 370 "gix_esql_scanner.ll"
{
			if(flag_insqlstring){   
				return yy::gix_esql_parser::make_TOKEN(yytext, loc);  
			}
			return yy::gix_esql_parser::make_IDENTIFIED_BY(loc);

	}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 378 "gix_esql_scanner.ll"
{
			if(flag_insqlstring){  
				return yy::gix_esql_parser::make_TOKEN(yytext, loc);
			}
			//return USING;
			return yy::gix_esql_parser::make_USING(loc);
	} 
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 386 "gix_esql_scanner.ll"
{
			if(flag_insqlstring && !flag_selectcommand){
	      		//yylval.s = strdup (yytext);
	      		//return TOKEN;      
				return yy::gix_esql_parser::make_TOKEN(yytext, loc);
			}
		    //yylval.s = strdup (yytext);
		    //return INTO;
			return yy::gix_esql_parser::make_INTO(yytext, loc);
	} 
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 397 "gix_esql_scanner.ll"
{
		return yy::gix_esql_parser::make_WHERE_CURRENT_OF(loc);
	}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 401 "gix_esql_scanner.ll"
{
	    //yylval.s = strdup (yytext);
	    //return TOKEN;      
		return yy::gix_esql_parser::make_TOKEN(yytext, loc);
	}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 407 "gix_esql_scanner.ll"
{
			driver.hostlineno = yylineno;
			return yy::gix_esql_parser::make_HOSTTOKEN(yytext, loc);
	}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 412 "gix_esql_scanner.ll"
{
			driver.hostlineno = yylineno;   
			return yy::gix_esql_parser::make_TOKEN(yytext, loc);
	}	
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 418 "gix_esql_scanner.ll"
{
			flag_insqlstring = 0;
			flag_selectcommand = 0;
			driver.period = 1;
			driver.endlineno = yylineno;
			BEGIN INITIAL;
			//return END_EXEC;
			return yy::gix_esql_parser::make_END_EXEC(loc);
	}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 428 "gix_esql_scanner.ll"
{
			flag_insqlstring = 0;
			flag_selectcommand = 0;
			driver.endlineno = yylineno;
			BEGIN INITIAL;
			//return END_EXEC;
			return yy::gix_esql_parser::make_END_EXEC(loc);
	}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 437 "gix_esql_scanner.ll"
{
		      //yylval.s = strdup (yytext);
		      //return TOKEN;  
			  return yy::gix_esql_parser::make_TOKEN(yytext, loc);
	}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 443 "gix_esql_scanner.ll"
{
	    //yylval.s = strdup (yytext);
	    //return TOKEN;      
		return yy::gix_esql_parser::make_TOKEN(yytext, loc);
	}
	YY_BREAK

case 49:
YY_RULE_SETUP
#line 450 "gix_esql_scanner.ll"
{

    if (driver.opt_preprocess_copy_files) {
		driver.startlineno = yylineno;
		driver.endlineno = yylineno;
		
		driver.commandname = "INCFILE";		
		
		int p = find_last_space(yytext);
		if (p < 0)
			p = 5;
		
		QString tts = QString(yytext).mid(p);
		tts = tts.left(tts.length() - 1);
		
		driver.incfilename = tts;

		return yy::gix_esql_parser::make_COPY(loc);
	}
}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 471 "gix_esql_scanner.ll"
{
    driver.period = 0;
	int n = count_crlf(yytext);
	driver.startlineno = yylineno - n; 
	driver.host_reference_list->clear();
	driver.res_host_reference_list->clear();

	driver.cursorname = "";
	driver.sqlname = "";
	driver.incfilename = "";
	
	driver.hostreferenceCount = 0;
	driver.command_putother = 0;
	driver.sql_list->clear();

	yy_push_state(ESQL_INCLUDE_STATE); 

	return yy::gix_esql_parser::make_EXECSQL_INCLUDE(loc);
}
	YY_BREAK

case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 492 "gix_esql_scanner.ll"
{   } 
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 493 "gix_esql_scanner.ll"
{
		driver.commandname = "INCSQLCA";		
		return yy::gix_esql_parser::make_INCLUDE_SQLCA(loc);
	}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 497 "gix_esql_scanner.ll"
{
		driver.commandname = "INCFILE";		
		driver.incfilename = yytext;
		return yy::gix_esql_parser::make_INCLUDE_FILE(loc);
	}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 502 "gix_esql_scanner.ll"
{
		driver.period = 1;
		driver.endlineno = yylineno;
		yy_pop_state(); 
		return yy::gix_esql_parser::make_END_EXEC(loc);
	}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 509 "gix_esql_scanner.ll"
{
		driver.endlineno = yylineno;
		yy_pop_state(); 
		return yy::gix_esql_parser::make_END_EXEC(loc);
	}
	YY_BREAK

case 56:
#line 517 "gix_esql_scanner.ll"
case 57:
#line 518 "gix_esql_scanner.ll"
case 58:
YY_RULE_SETUP
#line 518 "gix_esql_scanner.ll"
{
        driver.startlineno = yylineno;
        driver.endlineno = yylineno;
		driver.host_reference_list->clear();
		driver.res_host_reference_list->clear();	
		driver.cursorname = "";
		driver.sqlname = "";
		driver.incfilename = "";
		driver.hostreferenceCount = 0;
		driver.command_putother = 0;
		driver.sql_list->clear();

		switch (YYSTATE) {
			case INITIAL:
				yy_push_state(DATA_SECTION_STATE);
				if (strncmp(yytext,"WORKING-STORAGE", 15) == 0) {
					driver.commandname ="WORKING_BEGIN";
					driver.in_ws_section = true;
					return yy::gix_esql_parser::make_WORKINGBEGIN(loc); 
				}
				else 
					if (strncmp(yytext,"LINKAGE", 7) == 0) {
						driver.commandname ="LINKAGE_BEGIN";
						driver.in_linkage_section = true;
						return yy::gix_esql_parser::make_LINKAGEBEGIN(loc);
					}
					else 
						if (strncmp(yytext,"FILE", 4) == 0) {
							driver.commandname ="FILE_BEGIN";
							driver.in_file_section = true;
							return yy::gix_esql_parser::make_FILEBEGIN(loc);
						}
				
				break;

			case DATA_SECTION_STATE:
				yy_pop_state();
				if (driver.in_ws_section) {
					driver.in_ws_section = false;
					driver.commandname ="WORKING_END";
					driver.startlineno = yylineno - 1;
					driver.endlineno = yylineno - 1;
					UNPUT_TOKEN();
					return yy::gix_esql_parser::make_WORKINGEND(loc); 
				}
				else
					if (driver.in_linkage_section) {
						driver.in_linkage_section = false; 
						driver.commandname ="LINKAGE_END";
						driver.startlineno = yylineno - 1;
						driver.endlineno = yylineno - 1;
						UNPUT_TOKEN();
						return yy::gix_esql_parser::make_LINKAGEEND(loc); 
					}
					else
						if (driver.in_file_section) {
							driver.in_file_section = false;
							driver.commandname ="FILE_END";
							driver.startlineno = yylineno - 1;
							driver.endlineno = yylineno - 1;
							UNPUT_TOKEN();
							return yy::gix_esql_parser::make_FILEEND(loc); 
						}

				break;

		}

		return yy::gix_esql_parser::make_FILEEND(loc); 
}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 589 "gix_esql_scanner.ll"
{

	if (YYSTATE == DATA_SECTION_STATE) {
		yy_pop_state();
		if (driver.in_ws_section) {
			driver.in_ws_section = false;
			driver.commandname ="WORKING_END";
			driver.startlineno = yylineno - 1;
			driver.endlineno = yylineno - 1;
			UNPUT_TOKEN();
			return yy::gix_esql_parser::make_WORKINGEND(loc); 
		}
		else
			if (driver.in_linkage_section) {
				driver.in_linkage_section = false; 
				driver.commandname ="LINKAGE_END";
				driver.startlineno = yylineno - 1;
				driver.endlineno = yylineno - 1;
				UNPUT_TOKEN();
				return yy::gix_esql_parser::make_LINKAGEEND(loc); 
			}
			else
				if (driver.in_file_section) {
					driver.in_file_section = false;
					driver.commandname ="FILE_END";
					driver.startlineno = yylineno - 1;
					driver.endlineno = yylineno - 1;
					UNPUT_TOKEN();
					return yy::gix_esql_parser::make_FILEEND(loc); 
				}	
	}
	
	driver.startlineno = yylineno;
	driver.endlineno = yylineno;
	driver.host_reference_list->clear();
	driver.res_host_reference_list->clear();
	driver.cursorname = "";		
	driver.sqlname = "";		
	driver.incfilename = "";				

	driver.commandname = "PROCEDURE_DIVISION";		

	driver.procedure_division_started = true;
	driver.in_ws_section = false;
	driver.in_linkage_section = false;
	driver.in_file_section = false;

	driver.hostreferenceCount = 0;
	driver.command_putother = 0;
	driver.sql_list->clear();


	return yy::gix_esql_parser::make_PROCEDURE_DIVISION(loc);
}
	YY_BREAK

case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 647 "gix_esql_scanner.ll"
{   }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 649 "gix_esql_scanner.ll"
{
	      		//yylval.s = strdup (yytext);
	      		//return TOKEN;      
				return yy::gix_esql_parser::make_TOKEN(strdup (yytext), loc);
	          }
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 655 "gix_esql_scanner.ll"
{ 
				ECHO; 
				}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 659 "gix_esql_scanner.ll"
{ 
		return yy::gix_esql_parser::make_TABLE(loc);
	}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 663 "gix_esql_scanner.ll"
{
			if(flag_insqlstring){
				return yy::gix_esql_parser::make_TOKEN(strdup (yytext), loc);
			}
			flag_insqlstring = 1;

			driver.commandname = yytext;
						
			driver.sqlnum++;
     		driver.sqlname.sprintf("SQ%04d", driver.sqlnum);

			return yy::gix_esql_parser::make_SELECT(yytext, loc); 
	}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 677 "gix_esql_scanner.ll"
{
			if(flag_insqlstring){
				if(!flag_selectcommand){
		      			return yy::gix_esql_parser::make_TOKEN(yytext, loc);      
				} else {
		      			return yy::gix_esql_parser::make_SELECTFROM(strdup (yytext), loc);
				}
			}
			return yy::gix_esql_parser::make_FROM(loc);
	}  
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 688 "gix_esql_scanner.ll"
{
			if(flag_insqlstring){ 
				return yy::gix_esql_parser::make_TOKEN(strdup (yytext), loc);
			}
		    //return CURSOR;
			return yy::gix_esql_parser::make_CURSOR(loc);
	 }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 696 "gix_esql_scanner.ll"
{
		//return WITH_HOLD;
		return yy::gix_esql_parser::make_WITH_HOLD(1, loc);
	 }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 701 "gix_esql_scanner.ll"
{
			if(flag_insqlstring){
	      		//yylval.s = strdup (yytext);
	      		//return TOKEN;      
				return yy::gix_esql_parser::make_TOKEN(strdup (yytext), loc);
			}
			return yy::gix_esql_parser::make_FOR(loc);
	}      
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 711 "gix_esql_scanner.ll"
{
			if(flag_insqlstring && !flag_selectcommand){
	      		//yylval.s = strdup (yytext);
	      		//return TOKEN;      
				return yy::gix_esql_parser::make_TOKEN(yytext, loc);
			}
		     	//yylval.s = strdup (yytext);
		     	//return INTO;
				return yy::gix_esql_parser::make_INTO(yytext, loc); 
	} 
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 722 "gix_esql_scanner.ll"
{
	      		//yylval.s = strdup (yytext);
	      		//return TOKEN;      
				return yy::gix_esql_parser::make_TOKEN(yytext, loc);
	}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 728 "gix_esql_scanner.ll"
{
			//yylval.s = strdup (yytext + 1);
			driver.hostlineno = yylineno;
			//return HOSTTOKEN;
			return yy::gix_esql_parser::make_HOSTTOKEN(yytext, loc);
	}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 735 "gix_esql_scanner.ll"
{
			flag_insqlstring = 0;
			flag_selectcommand = 0;
			driver.period = 1;
			driver.endlineno = yylineno;
			yy_pop_state();
			return yy::gix_esql_parser::make_END_EXEC(loc);
	}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 744 "gix_esql_scanner.ll"
{
			flag_insqlstring = 0;
			flag_selectcommand = 0;
			driver.endlineno = yylineno;
			yy_pop_state();
			//return END_EXEC;
			return yy::gix_esql_parser::make_END_EXEC(loc);
	}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 753 "gix_esql_scanner.ll"
{
		      //yylval.s = strdup (yytext);
		      //return TOKEN;       
			  return yy::gix_esql_parser::make_TOKEN(yytext, loc);
	}
	YY_BREAK


case 75:
YY_RULE_SETUP
#line 762 "gix_esql_scanner.ll"
{
		yy_push_state(SPECIAL_DECLARE_STATE);
                driver.startlineno = yylineno;
                driver.endlineno = yylineno;
                driver.host_reference_list->clear();
                driver.res_host_reference_list->clear();        
		return yy::gix_esql_parser::make_BEGIN_DECLARE_SPECIAL(loc);
	}	  
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 771 "gix_esql_scanner.ll"
{
		yy_push_state(SPECIAL_DECLARE_STATE);
                driver.startlineno = yylineno-1;
                driver.endlineno = yylineno;
                driver.host_reference_list->clear();
                driver.res_host_reference_list->clear();                
		return yy::gix_esql_parser::make_BEGIN_DECLARE_SPECIAL(loc);
	}		
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 781 "gix_esql_scanner.ll"
{
		driver.startlineno = yylineno;
		driver.endlineno = yylineno;
		driver.host_reference_list->clear();
		driver.res_host_reference_list->clear();

		driver.commandname = "HOST_BEGIN";		
		driver.cursorname = "";
		driver.sqlname = "";
		driver.incfilename = "";

		driver.hostreferenceCount = 0;
		driver.command_putother = 0;
		driver.sql_list->clear();

		//return HOSTVARIANTBEGIN;
		return yy::gix_esql_parser::make_HOSTVARIANTBEGIN(loc);
    }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 800 "gix_esql_scanner.ll"
{
		driver.startlineno = yylineno;
		driver.endlineno = yylineno;
		driver.host_reference_list->clear();
		driver.res_host_reference_list->clear();

		driver.commandname = "HOST_END";		
		driver.cursorname = "";		
		driver.sqlname = "";		
		driver.incfilename = "";		

		driver.hostreferenceCount = 0;
		driver.command_putother = 0;
		driver.sql_list->clear();

		//return HOSTVARIANTEND;
		return yy::gix_esql_parser::make_HOSTVARIANTEND(loc);
    }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 819 "gix_esql_scanner.ll"
{
		driver.startlineno = yylineno;
		driver.endlineno = yylineno;
		
		driver.commandname = "INCFILE";		
		
		int p = find_last_space(yytext);
		if (p < 0)
			p = 5;
		
		QString tts = QString(yytext).mid(p);
		tts = tts.left(tts.length() - 1);
		
		driver.incfilename = tts;

		return yy::gix_esql_parser::make_COPY(loc);
	}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 839 "gix_esql_scanner.ll"
{}
	YY_BREAK
case 81:
#line 842 "gix_esql_scanner.ll"
case 82:
#line 843 "gix_esql_scanner.ll"
case 83:
#line 844 "gix_esql_scanner.ll"
case 84:
#line 845 "gix_esql_scanner.ll"
case 85:
#line 846 "gix_esql_scanner.ll"
case 86:
YY_RULE_SETUP
#line 846 "gix_esql_scanner.ll"
{
		driver.startlineno = yylineno - 1;
		driver.endlineno = yylineno - 1;
		driver.host_reference_list->clear();
		driver.res_host_reference_list->clear();
		
		driver.commandname = "WORKING_END";		
		driver.cursorname = "";		
		driver.sqlname = "";		
		driver.incfilename = "";		
		driver.in_ws_section = false;

		driver.hostreferenceCount = 0;
		driver.command_putother = 0;
		driver.sql_list->clear();
   
		BEGIN INITIAL;
		return yy::gix_esql_parser::make_WORKINGEND(loc);
    }
	YY_BREAK
case 87:
#line 868 "gix_esql_scanner.ll"
case 88:
YY_RULE_SETUP
#line 868 "gix_esql_scanner.ll"
{
		yy_push_state(PICTURE_STATE);
    }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 872 "gix_esql_scanner.ll"
{
		return yy::gix_esql_parser::make_OCCURS(loc);
	}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 876 "gix_esql_scanner.ll"
{
		return yy::gix_esql_parser::make_NUMERIC(atoi(yytext), loc);
	}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 880 "gix_esql_scanner.ll"
{return yy::gix_esql_parser::make_USAGE(loc);}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 881 "gix_esql_scanner.ll"
{ 
        return yy::gix_esql_parser::make_COMP(loc);     
	} 
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 884 "gix_esql_scanner.ll"
{ 
        return yy::gix_esql_parser::make_BINARY(loc);      
	}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 887 "gix_esql_scanner.ll"
{ 
        return yy::gix_esql_parser::make_COMP_1(loc);        
    }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 890 "gix_esql_scanner.ll"
{ 
        return yy::gix_esql_parser::make_COMP_2(loc);
    }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 893 "gix_esql_scanner.ll"
{
        return yy::gix_esql_parser::make_COMP_3(loc);
    }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 897 "gix_esql_scanner.ll"
{ return yy::gix_esql_parser::make_SIGN(loc) ;} 
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 898 "gix_esql_scanner.ll"
{ return yy::gix_esql_parser::make_LEADING(loc);}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 899 "gix_esql_scanner.ll"
{ return yy::gix_esql_parser::make_SEPARATE(loc); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 900 "gix_esql_scanner.ll"
{ return yy::gix_esql_parser::make_TRAILING(loc); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 901 "gix_esql_scanner.ll"
{ return yy::gix_esql_parser::make_EXTERNAL(loc);}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 902 "gix_esql_scanner.ll"
{ return yy::gix_esql_parser::make_IS(loc);}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 903 "gix_esql_scanner.ll"
{ return yy::gix_esql_parser::make_ARE(loc);}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 904 "gix_esql_scanner.ll"
{ return yy::gix_esql_parser::make_TIMES(loc);}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 905 "gix_esql_scanner.ll"
{ return yy::gix_esql_parser::make_VALUE(loc);}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 906 "gix_esql_scanner.ll"
{ return yy::gix_esql_parser::make_ALL(loc);} 
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 907 "gix_esql_scanner.ll"
{ return yy::gix_esql_parser::make_CONST(loc); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 908 "gix_esql_scanner.ll"
{
			return yy::gix_esql_parser::make_WORD(yytext, loc);
        }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 912 "gix_esql_scanner.ll"
{    
			return yy::gix_esql_parser::make_PERIOD(loc);
		}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 916 "gix_esql_scanner.ll"
{ }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 918 "gix_esql_scanner.ll"
{}
	YY_BREAK


case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 922 "gix_esql_scanner.ll"
{   }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 924 "gix_esql_scanner.ll"
{
		driver.commandname = "INCFILE";
		driver.incfilename = QString(yytext) + ".";
		yy_pop_state();
	    return yy::gix_esql_parser::make_COPY_FILE(loc);
	}
	YY_BREAK


case 114:
YY_RULE_SETUP
#line 934 "gix_esql_scanner.ll"
{
	/* ignore */
  }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 937 "gix_esql_scanner.ll"
{
	
	yy_pop_state();

	return yy::gix_esql_parser::make_PICTURE(yytext, loc);
  }
	YY_BREAK

case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 946 "gix_esql_scanner.ll"
{
	
}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 950 "gix_esql_scanner.ll"
{
     
	//Ignore 
}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 954 "gix_esql_scanner.ll"
{ 

}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 958 "gix_esql_scanner.ll"
{
	if (strlen(yytext) == 1 && yytext[0] == '.') {
		if (!driver.procedure_division_started && cur_line_content.contains("PROGRAM-ID")) {
			QString pid = cur_line_content.replace("PROGRAM-ID", "");
			pid = pid.replace(".", "").trimmed();
			driver.program_id = pid;
		}
		else
			if (isParagraph(cur_line_content)) {
				srcLocation *loc = new srcLocation();
				loc->filename = driver.lexer.src_location_stack.top().filename;
				loc->line = yylineno;
				loc->is_included = driver.lexer.src_location_stack.size() > 1;
				QString paragraph_name = cur_line_content.trimmed().chopped(1).trimmed();
			
				driver.paragraphs[paragraph_name] = *loc;
			}
		}
}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(PICTURE_STATE):
case YY_STATE_EOF(SPECIAL_DECLARE_STATE):
case YY_STATE_EOF(DATA_SECTION_STATE):
case YY_STATE_EOF(ESQL_FUNC_STATE):
case YY_STATE_EOF(ESQL_INCLUDE_STATE):
case YY_STATE_EOF(ESQL_SELECT_STATE):
case YY_STATE_EOF(ESQL_STATE):
case YY_STATE_EOF(INCLUDE_STATE):
case YY_STATE_EOF(FD_STATE):
#line 979 "gix_esql_scanner.ll"
{
	return yy::gix_esql_parser::make_YYEOF(loc);
	//yyterminate ();
}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 985 "gix_esql_scanner.ll"
ECHO;
	YY_BREAK
#line 3389 "gix_esql_scanner.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */
/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree( yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree( yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 966 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 966 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 965);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, char* yy_bp)
/* %endif */
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */
	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream& input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/* %if-c++-only */
/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	if( ! input_file ) {
		input_file = &yyin;
	}
	yyrestart( *input_file );
}
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
/* %endif */
/* %if-c++-only */
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
/* %endif */
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/* %if-c++-only */
/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_input_file = file.rdbuf();
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int _new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 985 "gix_esql_scanner.ll"


// CHANGE: The "parts of the driver that need lexer data" have been
// moved to gix_esql_driver.cc (where they really belong) and access the
// new lexer object via its public interface.

// CHANGE: The linker will choke if there's no implementation of the
// default `yylex` even if it's never called.
int yyFlexLexer::yylex() {
    std::cerr << "'int yyFlexLexer::yylex()' should never be called." << std::endl;
    exit(1);
}


int find_last_space(char * s)
{
	char *e = (s + strlen(s)) - 1;
	char * p;
	
	for (p = e; p >= s; p--) {
		if (*p == ' ')
			return (p - s) + 1;
	}
	return -1;

}

int count_crlf(char *s)
{
	int n = 0;
	char *e = (s + strlen(s)) - 1;
	//while (*e) {
	while (e >= s) {
		if (*e == '\n')
			n++;
			
		e--;
	}
	return n;
}

